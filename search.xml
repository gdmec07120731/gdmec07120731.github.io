<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[dataBinding?]]></title>
      <url>/2017/09/06/dataBinding/</url>
      <content type="html"><![CDATA[<p>A :  How to use Databinding?   </p>
<p>B:   such as read  this circle.</p>
<h3 id="Open_setting"><a href="#Open_setting" class="headerlink" title="Open setting"></a>Open setting</h3><p><strong>First</strong> , open your file which is in app/build.gradle , and you can see the android’ field  , you need to write the code like this  to open the dataBinding’ Setting.</p>
<figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="name">android</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  dataBinding &#123;</span><br><span class="line">    <span class="literal">enabled</span> = <span class="keyword">true</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Create_a_bean"><a href="#Create_a_bean" class="headerlink" title="Create a bean"></a>Create a bean</h3><p><strong>Second</strong> , create a bean which is named User in your package , and create two variable  as well as generate  their constroctor.   Two variable , name and age , were String variable and int variable . you must use the public to decorate two variable ,otherwise it wiil catch the <em>Exception</em>  such as like this :</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Could not find accessor package.User.name</span><br></pre></td></tr></table></figure>
<p>here are the full code</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String age;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Modify_the_xml"><a href="#Modify_the_xml" class="headerlink" title="Modify the xml"></a>Modify the xml</h3><p><strong>Thrid</strong> ,  add the <layout>  label to root  in  your xml . by the way ,you need to write  the android nameSpace in the layout element. create the <data> label which in the  <layout>  label . create  the  <import>  label  to import the User class which created juts now .  create the <variable> label  next to the <import>  with two property which is called name and type.  you can  write the name  which just like user, and type must be call User  .</import></variable></import></layout></data></layout></p>
<p>Now , you can give the text to TextView by Using anroid:text=”@{user.name}”  </p>
<p>here are the full code:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line">&lt;layout  xmlns:android="http://schemas.android.com/apk/res/android"</span><br><span class="line">    xmlns:app="http://schemas.android.com/apk/res-auto"ja&gt;</span><br><span class="line"></span><br><span class="line">&lt;data&gt;</span><br><span class="line">    &lt;import type="com.ppjun.android.databinding.User"/&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;variable</span><br><span class="line">        name="user"</span><br><span class="line">        type="User"/&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/data&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;RelativeLayout</span><br><span class="line"></span><br><span class="line">    android:id="@+id/activity_main"</span><br><span class="line">    android:layout_width="match_parent"</span><br><span class="line">    android:layout_height="match_parent"&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &lt;TextView</span><br><span class="line">        android:layout_below="@+id/toolbar"</span><br><span class="line">        android:id="@+id/name"</span><br><span class="line">        android:layout_width="wrap_content"</span><br><span class="line">        android:layout_height="wrap_content"</span><br><span class="line">        android:text="@&#123;user.name&#125;"</span><br><span class="line">       /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id="@+id/age"</span><br><span class="line">        android:layout_below="@+id/name"</span><br><span class="line">        android:layout_width="wrap_content"</span><br><span class="line">        android:layout_height="wrap_content"</span><br><span class="line">        android:text="@&#123;user.age&#125;"/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/RelativeLayout&gt;</span><br><span class="line">&lt;/layout&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Connect_to_the_data"><a href="#Connect_to_the_data" class="headerlink" title="Connect to the data"></a>Connect to the data</h3><p><strong>Final</strong> ,  gradle sync to generate the AcrivityMainBingding .</p>
<p>In the MainActivity ‘onCreate method , create the AcrivityMainBingding  binding  by Using the method   DataBindingUtil.setCotnentView(this,R.layout.activity_main);</p>
<p>new the User variable by it’s constroctor.</p>
<p>user binding.setUser(user); to binding the xml.</p>
<p>here are the full code:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ActivityMainBinding binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_main);</span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"ppjun"</span>, <span class="string">"23"</span>);</span><br><span class="line">binding.setUser(user);</span><br></pre></td></tr></table></figure>
<p>run the application you will see the TextView text like ppjun and 23.</p>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ol>
<li>DataBinding is easy for us to set the text  without findviewbyid.</li>
<li>The next article will show you more things about DataBinding. </li>
</ol>
<p>Thanks for your watching.<br>:)</p>
]]></content>
      
        
        <tags>
            
            <tag> dataBinding </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[清远古龙峡漂流]]></title>
      <url>/2017/05/31/piaoliu/</url>
      <content type="html"><![CDATA[<p>说到清远最出名的是漂流，走地鸡，并且有很多个各种大落差的峡可以去漂流。<br>这次我们抱团和朋友共4人去到乘大巴去到清远清城区古龙峡。</p>
<h3 id="u5F00_u59CB"><a href="#u5F00_u59CB" class="headerlink" title="开始"></a>开始</h3><p>【09:30】一行人在杨箕E1出口集合，并且开车到海珠广场装载第二批乘客<br>【10:00】到达海珠广场，停留15分钟。<br>【10:15】正式开车前往古龙峡，期间导游推销各种午餐，以及其公司的漂流道具店产品。<br>这里<strong>最好最好最好</strong>是自备各种午餐（可以购买面包，零食，三明治，水），以及水上道具（水勺下面有说到），袋子（隔离湿衣服），因为考虑到卫生以及节约成本，提高旅游的幸福愉悦感，其中路过清泉湾，广州地铁上都有卖广告。里面有个大喇叭滑梯的，需要穿泳衣进场。<br>【11:00】到达清远古龙峡。并且开始在小山上探险，为了折腾一下时间，因为漂流下午才开始。<br>【11:30】就餐是导游推荐的烤鸡。这里我非常不推荐。第一贵售价68元，个人不喜欢吃，第二不知道卫不卫生，是不是黑作坊的产品。<br>【12:30】30分钟的休息时间。<br>【13:00】开始换衣服，穿拖鞋。把手机等贵重物品放在贵重的物品保管格子。<br>【13:20】开始排队上山漂流。<br>【15:00】经过1个多钟的等待终于山上，现场很多人（端午假期）。期间等了好几趟，接送的车辆，和运输皮艇救生衣的车辆上山。<br>【15:10】穿好救生衣，戴好头盔，把水勺绑在救生衣上，2个人一只皮艇，抓紧皮艇左右扶手。开始漂流，一开始就有7-8米的落差，伴随着尖叫，顿时全身湿了，冰冷的泉水弄湿了身上的衣服，拖鞋也差点飞走。过程中还喝了不少水，再漂多几个落差后，熟悉了这样子的落差后就不用害怕了。每几个落差后，你都可以用水枪，水勺来泼水，其中水勺的爆发力强，选择妹子泼水。将近漂了几十分钟，从山顶漂到山脚了。<br>【15:45】到底山脚，结束漂流。<br>【16:00】换上干衣服，吃点小吃补充能量。<br>【16:30】结束行程开车回广州<br>【19:30】回到广州纪念堂，期间只有清远万达广场塞车。<br>【20:00】去到公元前吃晚餐。<br>【21:00】回宿舍了。</p>
<h3 id="u603B_u7ED3_uFF0C_u4E00_u5929_u7684_u6F02_u6D41_uFF1A"><a href="#u603B_u7ED3_uFF0C_u4E00_u5929_u7684_u6F02_u6D41_uFF1A" class="headerlink" title="总结，一天的漂流："></a>总结，一天的漂流：</h3><ol>
<li>漂流前自备大瓶水，午餐（面包，三明治，汽水，零食），多个袋子（隔离湿衣服），干衣服，全包裹拖鞋（防止被水冲走），水勺。</li>
<li>选择周末去跟团漂流，节假日排队时间比漂流时间都长。<br>最后，附赠一张漂流照片留念。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/669793-70704b09f86c0c1a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="古龙峡漂流"></p>
]]></content>
      
        
        <tags>
            
            <tag> tourist </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[16.04.2]]></title>
      <url>/2017/05/27/16-04-2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这节课我们讲iptables在ubuntu干啥子的，还有如果不想做网管的程序员，那么他就不是好的厨子。by the way如果想深入了解linux可以看一下鸟哥的私房菜，那是一本我14年一个人躲在小黑屋看过几页的书。下面是小弟的愚见，如果有什么不对，还请阁下斧正。</p>
</blockquote>
<h1 id="u4EC0_u4E48_u662Fiptables"><a href="#u4EC0_u4E48_u662Fiptables" class="headerlink" title="什么是iptables"></a>什么是iptables</h1><p><code>iptables</code>是用来设置、维护和检查<code>Linux</code>内核的IP包过滤规则的。就是一个ip防火墙，也就是说我们无论用什么端口访问别人还是别人用什么端口来访问我们，都要经过iptables的名单的ip和端口才能正常访问。比如，我在阿里云买了一台云服务器，在服务器上装了tomcat服务，要给外网访问，这时候你要用到iptables加入8080端口，再云控制台添加该端口到安全组。for example 完成上诉操作后你才能在外网访问，比如访问这个地址<a href="http://119.23.108.84:8080/" target="_blank" rel="external">http://119.23.108.84:8080/</a>  </p>
<h1 id="iptables_u57FA_u672C_u4F7F_u7528"><a href="#iptables_u57FA_u672C_u4F7F_u7528" class="headerlink" title="iptables基本使用"></a>iptables基本使用</h1><p><strong>查看</strong>当前iptables表   <code>iptables -nvL --line-numbers</code></p>
<p>命令里面的n代表numeric数字打印ip和端口，这里的v代表verbose打印详细信息，这里的L代表iptables的全部list打印全部链，line-numbers 加数字前缀。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@iZwz986xashhbt7wugurgkZ:~# iptables -nvL --line-numbers</span><br><span class="line">Chain INPUT (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">1     1640  123K ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8080</span><br><span class="line">2    18115 1078K ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:22</span><br><span class="line">3     1269 95663 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:80</span><br><span class="line">4     6500  695K ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8090</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 80332 packets, 7525K bytes)</span><br><span class="line">num   pkts bytes target     prot opt in     out     source               destination</span><br></pre></td></tr></table></figure>
<p>从上面代码我们看出有端口号8080，22，80，8090都加入了iptables的INPUT ，那么上面的INPUT和FORWADRD和OUTPUT是什么呢。<img src="https://sfault-image.b0.upaiyun.com/877/418/877418209-54b3c392a66e1" alt="img"></p>
<p>iptables的INPUT链用来过滤进入的数据，比如我有的手机设置了只能手机尾号是091的人打进来，其他尾号的手机就打不进来了</p>
<p>iptables的OUTPUT链用来过滤出去的数据，比如我的手机在锁屏的紧急模式下只能打紧急电话，其他号码的手机就打不出来了</p>
<p>FORWARD </p>
<h1 id="iptables_u9AD8_u7EA7_u4F7F_u7528"><a href="#iptables_u9AD8_u7EA7_u4F7F_u7528" class="headerlink" title="iptables高级使用"></a>iptables高级使用</h1>]]></content>
      
        
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[负荷领域的既视感]]></title>
      <url>/2017/05/07/%E8%B4%9F%E8%8D%B7%E9%A2%86%E5%9F%9F%E7%9A%84%E6%97%A2%E8%A7%86%E6%84%9F/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/669793-ab295359046961c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="拿人初吻的助手.png"><br>故事发生在TV版命运石之门世界线1年后。<br>因为凤凰院穿越太多世界线了，后遗症是世界线抖动，去到一条新的世界线R，那里只有他一人和他那痛苦的记忆。消失在命运石之门的世界线上证明他在很早前就GG了，在2011年人们没他的记忆。想要救他就要去更早的世界线救他，然后来自未来的的阿万音来到了命运石之门这条世界线上，让助手制造出手机和微波炉组合的时光机，穿越回去救人。回去48小时前不管用，这条线也是没凤凰院的存在，后来，助手要求阿万音来到2005年，那是一条有凤凰院的世界线。最后躲避了车祸，成功救下了凤凰院。然后嘟噜噜那天在扫墓吧，助手亲完凤凰院，凤凰院挟持了嘟噜噜做人质，然后世界线切回到了这是命运石之门的世界线了。</p>
<p>最后：<br>不是我过来了，而是你要回去了。要从这个世界回到命运石之门的世界线，快想起来，当你在无数的世界线举棋不定的时候，一直都是我陪着你，还有真由理 还有桥田 以及菲伊莉斯小姐也是 漆原同学也好 桐生小姐也好 乃至阿万音小姐 大家都没有忘记你，想要自己独力一个人撑起这个世界你想得美别忘了，无论身处哪一条世界线 你都不是一个人；无论你钻到什么地方 我都会把你找出来，我会一直观测着你，就像你一直观测着我一样。</p>
<p>总结：<br>喜欢就追吧，别后悔了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/669793-88cc31ebc48e4274.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="happyending.png"></p>
<p>–The End–</p>
]]></content>
      
        
        <tags>
            
            <tag> もはや孤独の观测者 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[搭建jekyll博客]]></title>
      <url>/2017/04/23/%E6%90%AD%E5%BB%BAjekyll%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>主流的个人博客都是用hexo搭建的，一部分人喜欢用jekyll搭建，下面我们来细说一下操作流程</p>
<h1 id="u6548_u679C"><a href="#u6548_u679C" class="headerlink" title="效果"></a>效果</h1><p>今天，我们要做到到这个主题效果<a href="http://huangxuan.me/" target="_blank" rel="external">http://huangxuan.me/</a> </p>
<h1 id="u4E0B_u8F7D"><a href="#u4E0B_u8F7D" class="headerlink" title="下载"></a>下载</h1><p>下载rubygems <a href="http://rubyinstaller.org/" target="_blank" rel="external">http://rubyinstaller.org/</a> 选择<a href="http://rubyinstaller.org/news/2016/12/07/rubyinstaller-2-2-6-and-2-3-3-released/" target="_blank" rel="external">2.3.3 released</a>，安装过程中现在加入path。</p>
<h2 id="u5207_u6362ruby_u955C_u50CF"><a href="#u5207_u6362ruby_u955C_u50CF" class="headerlink" title="切换ruby镜像"></a>切换ruby镜像</h2><p>在git bash下</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gem sources --<span class="built_in">add</span> http<span class="variable">s:</span>//gems.<span class="keyword">ruby</span>-china.org/ --<span class="built_in">remove</span> http<span class="variable">s:</span>//rubygems.org/</span><br><span class="line">$ gem sources -<span class="keyword">l</span></span><br><span class="line">http<span class="variable">s:</span>//gems.<span class="keyword">ruby</span>-china.org</span><br><span class="line"># 确保只有 gems.<span class="keyword">ruby</span>-china.org</span><br></pre></td></tr></table></figure>
<p>如果遇到SSL问题 将https改为http。</p>
<h2 id="u4E0B_u8F7Dbundler"><a href="#u4E0B_u8F7Dbundler" class="headerlink" title="下载bundler"></a>下载bundler</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem <span class="keyword">install</span> bundler</span><br></pre></td></tr></table></figure>
<p>如果遇到使用gem下载遇到ENETRESET 问题，请打开<a href="https://github.com/rubygems/rubygems/issues/1214，解决办法关键就是关闭防火墙。" target="_blank" rel="external">https://github.com/rubygems/rubygems/issues/1214，解决办法关键就是关闭防火墙。</a></p>
<p>下载jekyll</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem <span class="keyword">install</span> jekyll</span><br></pre></td></tr></table></figure>
<p>下载jeky-paginate</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem <span class="keyword">install</span> jekyll-paginate</span><br></pre></td></tr></table></figure>
<h2 id="u514B_u9686_u4E3B_u9898"><a href="#u514B_u9686_u4E3B_u9898" class="headerlink" title="克隆主题"></a>克隆主题</h2><p>新建jekyll文件夹执行</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">clone</span> <span class="title">git</span>@github.com:Huxpro/huxblog-boilerplate.git</span><br></pre></td></tr></table></figure>
<p>cd到huxblog-boilerplate</p>
<p>执行jekyll serve 可以在<a href="http://localhost:4000看到效果。" target="_blank" rel="external">http://localhost:4000看到效果。</a></p>
<h1 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h1><ol>
<li>jekyll博客没hexo博客方便切换主题。</li>
<li>jeky博客加入不同字体，图片，打破你的审美疲劳。</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[AndroidIM融云接入]]></title>
      <url>/2017/04/21/AndroidIM%E8%9E%8D%E4%BA%91%E6%8E%A5%E5%85%A5/</url>
      <content type="html"><![CDATA[<h1 id="u878D_u4E91_u7BC7"><a href="#u878D_u4E91_u7BC7" class="headerlink" title="融云篇"></a>融云篇</h1><p>融云官网地址<a href="http://www.rongcloud.cn/docs/android.html" target="_blank" rel="external">http://www.rongcloud.cn/docs/android.html</a>  </p>
<p> 我们一般是接入IMkit，包含界面的sdk。</p>
<p>首先我们需要现在IMKit IMLib（发送文本模块）CallKit CallLib（语音视频模块） LocationLib（地理位置模块） PushLib（推送模块） RedPacket（红包模块）</p>
<p>首先你要去创建一个新的as项目，然后以module的形式导入IMKit IMLib CallKit CallLib RedPacket ，然后把Push的so文件加入jniLibs ，而Jar文件加入libs。</p>
<p>还要把executable的推送保活so文件加入到assets。因为使用的语音报，只能使用armeabi-v7a 和x86的so文件。在app/build.gradle/defaultConfig域内，加入</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">defaultConfig&#123;</span><br><span class="line">  ndk&#123;</span><br><span class="line">    abiFilters <span class="string">"armeabi-v7a"</span>,<span class="string">"x86"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>把官网控制台的app-key 加入到IMLib 模块的Androidminifest.xml内对应的meta标签的RONG_CLOUD_APP_KEY内。还要自己申请高德地图的appkey放在自己app的module里面。</p>
<h2 id="u521D_u59CB_u5316"><a href="#u521D_u59CB_u5316" class="headerlink" title="初始化"></a>初始化</h2><p>自定义Applicaiton ，并且在Androidmanifest声明。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class App extends Application</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate();</span><br><span class="line">    RongIM.init(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="u83B7_u53D6token"><a href="#u83B7_u53D6token" class="headerlink" title="获取token"></a>获取token</h2><p>这里的token是融云sdk的token代表一个用户有效登陆状态，流程是客户端请求服务器，服务器用userid，name和头像地址去请求融云sdk服务器，返回token。</p>
<p>##连接融云服务器</p>
<p>一般在登录界面 客户端拿到token，调用RongIM.connect(token,ConnectCallback) 在回调成功的方法里面 跳转到融云的聊天列表界面。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[android面试题]]></title>
      <url>/2017/04/20/android%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="1-_Activity_u548Cfragment_u7684_u751F_u547D_u5468_u671F"><a href="#1-_Activity_u548Cfragment_u7684_u751F_u547D_u5468_u671F" class="headerlink" title="1. Activity和fragment的生命周期"></a>1. Activity和fragment的生命周期</h3><ol>
<li><p>Activity从onCreate→onStart→onResume→onPause→onStop→onDestroy，其中oncreate初始化加载布局资源，onStart布局可见但是还在后台不可交互</p>
<p>onResume布局可见在前台可以交互。onPause正在停止当前activity，onStop表示activity即将停止，做一些回收资源操作，onDestroy销毁activity最终的资源释放。总结：onStart和onPause可见不可见，onResume和onStop可不可以交互</p>
</li>
<li><p>Fragment从onAttach→onCreate→onCreateView→onStart→onResume→onPause→onStop→onDestroyView→onDestroy-onDetach</p>
<p>​</p>
</li>
</ol>
<h3 id="2-_Layout_gravity_u548Cgravity_u7684_u533A_u522B_u3002"><a href="#2-_Layout_gravity_u548Cgravity_u7684_u533A_u522B_u3002" class="headerlink" title="2. Layout_gravity和gravity的区别。"></a>2. Layout_gravity和gravity的区别。</h3><p>比如设置android:layout_gravity=”right”的button会显示在父view的最右边。所以layout_gravity是设置当前view在父view的位置。</p>
<p>比如设置了android:gravity=”left”的LinearLayout会让里面的子View最显示在最左边。所以gravity是设置当前view里面的子view的位置。</p>
<h3 id="3-__u5F53_u4E00_u4E2Aactivity_u8DF3_u8F6C_u5230_u53E6_u4E00_u4E2Aactivity_u7684_u751F_u547D_u5468_u671F"><a href="#3-__u5F53_u4E00_u4E2Aactivity_u8DF3_u8F6C_u5230_u53E6_u4E00_u4E2Aactivity_u7684_u751F_u547D_u5468_u671F" class="headerlink" title="3. 当一个activity跳转到另一个activity的生命周期"></a>3. 当一个activity跳转到另一个activity的生命周期</h3><p>我们分别用AB代替两个activity</p>
<p>onPause(A)→onCreate(B)→onStart(B)→onResume(B)→onStop(A)</p>
<h3 id="4-_u7B80_u5355_u4ECB_u7ECDHandler_Message_MessageQueue_Looper"><a href="#4-_u7B80_u5355_u4ECB_u7ECDHandler_Message_MessageQueue_Looper" class="headerlink" title="4.简单介绍Handler Message MessageQueue Looper"></a>4.简单介绍Handler Message MessageQueue Looper</h3><p>当Handler调用sendMessage方法会先把调用MessageQueue.enqeueMessage把Message加到消息队列，然后Looper开启循环不断遍历消息队列，调用MessageQueue.next获取message，然后调用目标Handler的dispatchMessage，判断Message有没有Callback即有没有Runnable对象，再判断Handler有没有callback，如果都没最后输出到Handler的handleMessage方法来处理消息。</p>
<h3 id="5-__u5185_u5B58_u6EA2_u51FA_u548C_u5185_u5B58_u6CC4_u9732"><a href="#5-__u5185_u5B58_u6EA2_u51FA_u548C_u5185_u5B58_u6CC4_u9732" class="headerlink" title="5. 内存溢出和内存泄露"></a>5. 内存溢出和内存泄露</h3><p>oom又叫out of memory 就是内存溢出。就是对象需求的内存大于jvm可用内存，避免oom要</p>
<h4 id="u51CF_u5C0F_u5BF9_u8C61_u5185_u5B58_u7684_u4F7F_u7528"><a href="#u51CF_u5C0F_u5BF9_u8C61_u5185_u5B58_u7684_u4F7F_u7528" class="headerlink" title="减小对象内存的使用"></a>减小对象内存的使用</h4><p>1）使用更加轻量的数据结构，使用ArrayMap/SparseArray代替HashMap</p>
<p>2）避免使用Enum</p>
<p>3）减小bitmap对象的内存占用 使用insampleSize缩放比例，设置decodeFormat，解码格式</p>
<p>4）使用更小的图片，用tinypng压缩图片</p>
<h4 id="u5185_u5B58_u5BF9_u8C61_u7684_u91CD_u590D_u4F7F_u7528_u3002_u4F7F_u7528_u5BF9_u8C61_u6C60"><a href="#u5185_u5B58_u5BF9_u8C61_u7684_u91CD_u590D_u4F7F_u7528_u3002_u4F7F_u7528_u5BF9_u8C61_u6C60" class="headerlink" title="内存对象的重复使用。使用对象池"></a>内存对象的重复使用。使用对象池</h4><p>1）StringBuilder减少String对象创建</p>
<p>2）避免在onDraw创建对象，因为onDraw会频繁调用，频繁gc，从而造成内存抖动。</p>
<p>3）复用系统提供的资源，比如字符串 颜色 图片 动画 样式 和布局</p>
<p>4）在listview或者gridview对convertView的复用</p>
<p>5）bitmap对象的复用在api11-18使用inbitmap，确定具有相同的解码模式，第二张图片会使用第一张照片已存在的位置</p>
<h4 id="u907F_u514D_u5185_u5B58_u6CC4_u9732"><a href="#u907F_u514D_u5185_u5B58_u6CC4_u9732" class="headerlink" title="避免内存泄露"></a>避免内存泄露</h4><p>1）注意Activity的泄漏，一般是内部类引用导致activity泄露比如handler</p>
<p>2）Activity Context被传到其他实例中，这可能导致自身引用发生泄漏</p>
<p>3）考虑使用Application Context 而不是Activity Context当然dialog就必须是activity的content</p>
<p>4）注意临时的bitmap对象的回收 调用bitmap.recycle()</p>
<p>5） 监听器的注销要手动unregister 比如realm的list监听器</p>
<p>6）注意缓存容器中的对象泄漏比如2.3版本的drawable会对view强引用，</p>
<p>7）注意webview的泄露 </p>
<p>8）还有Cursor游标的关闭。</p>
<h3 id="6-_Jvm_u7684_u5806_u6808_u65B9_u6CD5_u533A"><a href="#6-_Jvm_u7684_u5806_u6808_u65B9_u6CD5_u533A" class="headerlink" title="6.  Jvm的堆栈方法区"></a>6.  Jvm的堆栈方法区</h3><p><strong>堆区</strong>存放所有的对象，只有一个，每个对象都包含一个与之对应的class信息class的目的是得到操作指令，但是不包括基本类型和对象引用，new一个类就是对象引用。只存放对象本身。</p>
<p><strong>栈区</strong> 每个线程都有一个栈区，用来存放对象的引用和基本类型，（怎么区分对象和对象的应用呢 举个例子 Person person=new Person(); =左边是对象的引用，=右边是对象），其他栈不能访问另外一个栈的内容</p>
<p><strong>方法区</strong>，就是静态变量static修饰的变量，常量。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式SOLID五大原则]]></title>
      <url>/2017/03/20/solid/</url>
      <content type="html"><![CDATA[<h1 id="u8BBE_u8BA1_u6A21_u5F0FSOLID_u4E94_u5927_u539F_u5219"><a href="#u8BBE_u8BA1_u6A21_u5F0FSOLID_u4E94_u5927_u539F_u5219" class="headerlink" title="设计模式SOLID五大原则"></a>设计模式SOLID五大原则</h1><p>SOLID每一个字母都代表这一种编程原则，其中</p>
<ol>
<li>S代表着单一职责原则</li>
<li>O代表着开闭原则</li>
<li>L代表着里氏替换原则</li>
<li>I代表着接口隔离原则</li>
<li>D代表着依赖倒置原则</li>
</ol>
<h2 id="u5355_u4E00_u804C_u8D23_u539F_u5219"><a href="#u5355_u4E00_u804C_u8D23_u539F_u5219" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><p>单一职责原则就是造成一个类改变的原因一个只有一个。再比如手机的电池是一个类，电池只为手机提供电源的职责。</p>
<p>在Android开发中，adapter类职责只负责视图的显示，这时候你会说adapter里面还有很多方法比如创建视图，显示视图，提供视图数量等。但是根据Martin的话来说变化的指针只在变化真正发生时起作用，如果没有任何征兆，应用单一职责原则或者其他原则是不明智的。就是说adapter创建和显示视图是这个类的职责，而不应该包括视图显示内容的计算逻辑，我只要知道结果就行了。下面看例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UserOrder.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserOrder</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">double</span> createTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(<span class="keyword">double</span> createTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//UserOrderAdapter.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserOrderAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">UserOrderAdapter</span>.<span class="title">UserOrderHolder</span>&gt; </span>&#123;</span><br><span class="line">  List&lt;UserOrder&gt; mList;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserOrderAdapter</span><span class="params">(List&lt;UserOrder&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mList = list;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserOrderHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.user_order_rv_item, parent, <span class="keyword">false</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> UserOrderHolder(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="keyword">final</span> UserOrderHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        holder.mPayBtn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">              UserOrder userOrder=mList.get(position);</span><br><span class="line">              SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">              holder.mCreatetime.setText(sdf.format(userOrder.getCreateTime()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mList.size();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserOrderHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">        TextView mCreatetime;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UserOrderHolder</span><span class="params">(View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">          mCreatetime = (TextView) itemView.findViewById(R.id.user_order_createtime);</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>↑这里的onBindViewHolder处理了视图的逻辑，应该把时间格式化的操作放在UserOrder类中。如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UserOrder.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserOrder</span> </span>&#123;</span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> createTime;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sdf.format(createTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(<span class="keyword">double</span> createTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//UserOrderAdapter.java</span></span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="keyword">final</span> UserOrderHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        holder.mPayBtn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">              UserOrder userOrder=mList.get(position);</span><br><span class="line">              holder.mCreatetime.setText(userOrder.getCreateTime());<span class="comment">//格式化时间的逻辑放在UserOrder类中</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>总结：一个类只包含一个职责，其他的逻辑放在对应的类上处理。</p>
<h2 id="u5F00_u95ED_u539F_u5219"><a href="#u5F00_u95ED_u539F_u5219" class="headerlink" title="开闭原则"></a>开闭原则</h2><p>开闭原则就是在每次有新需求都不能在原来的代码中做修改。你可以一开始的时候就用多态和接口来实现架构，让你的代码更容易扩展，而不是修改。</p>
<p>比如你要计算一个三角形的面积</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Triangle.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Triangle</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> width;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> height;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> width*height/<span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//setter&amp;getter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//AreaManager</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AreaManager</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">calculateArea</span><span class="params">(ArrayList&lt;Triangle&gt; triangles)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> area=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(Triangle triangle:triagnles)</span><br><span class="line">        area+=triangle.getArea();</span><br><span class="line">    <span class="keyword">return</span> area;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一开始代码是这样子设计的，但是后续要继续加上圆形，矩形的面积，就要在AreaManager类里面加上计算圆形，矩形的面积方法，不符合我们的开闭原则。所以要写一个shape接口，让三角形矩形都实现这个接口，在calculateArea方法里面传入ArrayList<shape>。不管以后要计算什么边形的面积只要实现shape接口即可。</shape></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> pi=<span class="number">3.14</span>;</span><br><span class="line">  <span class="keyword">double</span> radius;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> radius*radius*pi;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//setter&amp;getter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AreaManager</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculateArea</span><span class="params">(ArrayList&lt;Shape&gt; shapes)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> area=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(Shape shape:shapes)&#123;</span><br><span class="line">      area+=shape.getArea();</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> area;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：在写计算方法时，考虑到以后有多个方案要怎么设计。通常是多个方案都实现了一个接口，接口方法就是该方案的逻辑。然后在方法被调用时传入接口类作为参数，调用接口方法。</p>
<h2 id="u91CC_u6C0F_u66FF_u6362_u539F_u5219"><a href="#u91CC_u6C0F_u66FF_u6362_u539F_u5219" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><p>里氏替换原则就是用接口类或者父类来替代子类，而不改变程序的正确性。</p>
<p>举个例子，下面adapter的构造函数就用了List类型的参数来替换ArrayList类型。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MainActivity.java</span></span><br><span class="line">List&lt;String&gt; mList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">mList.add(<span class="string">"str"</span>);</span><br><span class="line">UserOrderAdapter adapter=<span class="keyword">new</span> UserOrderAdapter(mList);</span><br><span class="line"></span><br><span class="line"><span class="comment">//UserOrderAdapter.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserOrderAapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">UserorderHolder</span>&gt;</span>&#123;</span><br><span class="line">  List&lt;String&gt; list;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">UserOrderAdapter</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.list=list;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面例子用了一个Arraylist的变量作为返回值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getList</span><span class="params">(String[] str)</span></span>&#123;</span><br><span class="line">  ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="keyword">for</span>(String s:str)</span><br><span class="line">    list.add(s);</span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结，这个原则相当简单你应该相当熟悉或者你每天都在用了。</p>
<h2 id="u63A5_u53E3_u9694_u79BB_u539F_u5219"><a href="#u63A5_u53E3_u9694_u79BB_u539F_u5219" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><p>接口隔离原则有点像单一职责原则，不过目标是接口类应该只有一种职责。</p>
<p>比如自定义一个View需要加上一个点击事件，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">onClickListener</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，你又有需求要加上一个长按事件和一个触摸事件，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">onClickListener</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onLongClick</span><span class="params">(View v)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onTouch</span><span class="params">(View v,MotionEvent ev)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在设置监听这个接口时：你必须重写这三个方法，可能你用不着后面两个方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> CustomeView.setOnClick(<span class="keyword">new</span> OnClickListener&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLongClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTouch</span><span class="params">(View v,MotionEvent ev)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这个违背了接口隔离原则，一个实现接口的类应该依赖他最小的接口。</p>
<p>所以我们的onClickListener只要写一个onClick方法就行了。其他的方法另外创建接口来写。比如OnTouchListener。</p>
<p>总结：我们写一个接口类里面的方法应该是同一个职责的，不同职责的接口方法创建新的接口类来实现。</p>
<h2 id="u4F9D_u8D56_u5012_u7F6E_u539F_u5219"><a href="#u4F9D_u8D56_u5012_u7F6E_u539F_u5219" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><p>依赖倒置就是依赖抽象，而不依赖具体的实例。</p>
<p>就是在项目中我们的架构分为三层，安卓ui→业务逻辑→数据层，业务逻辑具体是判断写入或者获取数据是否符合条件</p>
<p>比如我们现在要做网络可用时将一个字符串写入数据库的操作，这样子activity就持有netmanager和dbmanager的具体实例子，不符合我们的依赖倒置原则。如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MainActivity.java</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span>  <span class="title">onCreate</span><span class="params">(bundle savedInstanceState)</span></span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">  setContentView(R.layout.activity_main);</span><br><span class="line">  NetWorkManager netManager=<span class="comment">//...</span></span><br><span class="line">    <span class="function">DbManager dbManager</span><br><span class="line">  <span class="title">if</span><span class="params">(netManager.isNetWorkConnected)</span></span>&#123;</span><br><span class="line">     dbManager.insert();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//NetWorkManager.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNetWorkConnected</span><span class="params">()</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//DbManager.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>所以我们要做出如下修改：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//MainActivity.java</span></span><br><span class="line">IDbManager IdbManager;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span>  <span class="title">onCreate</span><span class="params">(bundle savedInstanceState)</span></span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">  setContentView(R.layout.activity_main);</span><br><span class="line">     IdbManager=<span class="keyword">new</span> DBManager(<span class="keyword">this</span>);<span class="comment">//实例化BDmanager</span></span><br><span class="line">     IdbManager.insert();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//IDbManager.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDbManager</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//DbManager.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbManager</span></span>&#123;</span><br><span class="line">  INetManager netManager;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNetManager</span><span class="params">(INetManager netManager)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.netManager=netManager;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(netManager.isNetworkConnected())&#123;</span><br><span class="line">     <span class="comment">//do</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//INetManager.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">INetManager</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isNetworkConnected</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//NetManager.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetManager</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNetworkConnected</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//do</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样子就可以让activity直接依赖IDbManager的抽象类。</p>
<p>总结：通常我们为了更简单实例化抽象类，我们推荐使用dagger2。</p>
]]></content>
      
        
        <tags>
            
            <tag> solid </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EventBus3.0源码分析]]></title>
      <url>/2017/03/13/EventBus3-0%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="EventBus3-0_u6E90_u7801_u5206_u6790"><a href="#EventBus3-0_u6E90_u7801_u5206_u6790" class="headerlink" title="EventBus3.0源码分析"></a>EventBus3.0源码分析</h1><p>从3.0开始用了更多注解事件的订阅方法来代替之前固定onEvent开头的方法。现在你可以是容易方法加上@Subscribe的注解。</p>
<p>更多的eventbus使用方法请看<a href="http://www.jianshu.com/p/c47e0900399e" target="_blank" rel="external">http://www.jianshu.com/p/c47e0900399e</a></p>
<h2 id="EventBus-java"><a href="#EventBus-java" class="headerlink" title="EventBus.java"></a>EventBus.java</h2><ol>
<li>EventBus类的创建使用了常见的单例模式，如下：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> EventBus defaultInstance; <span class="comment">//volatile 修饰的变量防止被编译器优化，导致执行顺序变化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EventBus <span class="title">getDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (defaultInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">synchronized</span> (EventBus.class) &#123;</span><br><span class="line">               <span class="keyword">if</span> (defaultInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   defaultInstance = <span class="keyword">new</span> EventBus();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> defaultInstance;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>使用了建造者模式给变量赋值。先在EventBus的构造方法创建EventBusBuilder ，再重载过的EventBus方法传入builder来配置一些变量（比如一些exception）。如下：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> EventBus(EventBusBuilder builder) &#123;</span><br><span class="line">    subscriptionsByEventType = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    typesBySubscriber = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    stickyEvents = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    mainThreadPoster = <span class="keyword">new</span> HandlerPoster(<span class="keyword">this</span>, Looper.getMainLooper(), <span class="number">10</span>);</span><br><span class="line">    backgroundPoster = <span class="keyword">new</span> BackgroundPoster(<span class="keyword">this</span>);</span><br><span class="line">    asyncPoster = <span class="keyword">new</span> AsyncPoster(<span class="keyword">this</span>);</span><br><span class="line">    indexCount = builder.subscriberInfoIndexes != <span class="keyword">null</span> ? builder.subscriberInfoIndexes.size() : <span class="number">0</span>;</span><br><span class="line">    subscriberMethodFinder = <span class="keyword">new</span> SubscriberMethodFinder(builder.subscriberInfoIndexes,</span><br><span class="line">            builder.strictMethodVerification, builder.ignoreGeneratedIndex);</span><br><span class="line">    logSubscriberExceptions = builder.logSubscriberExceptions;</span><br><span class="line">    logNoSubscriberMessages = builder.logNoSubscriberMessages;</span><br><span class="line">    sendSubscriberExceptionEvent = builder.sendSubscriberExceptionEvent;</span><br><span class="line">    sendNoSubscriberEvent = builder.sendNoSubscriberEvent;</span><br><span class="line">    throwSubscriberException = builder.throwSubscriberException;</span><br><span class="line">    eventInheritance = builder.eventInheritance;</span><br><span class="line">    executorService = builder.executorService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>在register中，获取订阅者的类subscriberClass通常是activity和fragment。然后通过subscribeerMethodFinder获取订阅者上订阅方法返回一个list集合。其中subscriberMethod就是写在activity上拿来接受消息的方法的对象，里面的变量包括Method就可以知道方法名；eventType可以知道是ativity还是fragment；threadMode是哪个线程；sticky是否粘性事件；priority优先级系数多少。如下：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object subscriber)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; subscriberClass = subscriber.getClass();</span><br><span class="line">    List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (SubscriberMethod subscriberMethod : subscriberMethods) &#123;</span><br><span class="line">            subscribe(subscriber, subscriberMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Realm-in-android-1]]></title>
      <url>/2017/02/23/Realm-in-android-1/</url>
      <content type="html"><![CDATA[<h1 id="Realm_u4ECB_u7ECD"><a href="#Realm_u4ECB_u7ECD" class="headerlink" title="Realm介绍"></a>Realm介绍</h1><ul>
<li>Realm官网链接<a href="https://realm.io/" target="_blank" rel="external">https://realm.io/</a></li>
<li>开源地址<a href="https://github.com/realm/realm-java" target="_blank" rel="external">https://github.com/realm/realm-java</a></li>
<li>官方使用文档<a href="https://realm.io/docs/java/latest/" target="_blank" rel="external">https://realm.io/docs/java/latest/</a></li>
</ul>
<p>Realm是一个开源的ORM概念的（对象关系映射）移动数据库，可以在Android ，ios ，java各个平台上使用，性能秒杀sqlite等数据库比如（greendao）。</p>
<h1 id="u5FEB_u901F_u5165_u95E8"><a href="#u5FEB_u901F_u5165_u95E8" class="headerlink" title="快速入门"></a>快速入门</h1><p>只需<strong>两步</strong></p>
<p>在项目的build.gradle中dependencies输入classpath “io.realm:realm-gradle-plugin:2.3.1”，这里要双引号。这里要双引号。这里要双引号。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line"></span><br><span class="line">        jcenter()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:2.2.3'</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">"io.realm:realm-gradle-plugin:2.3.1"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在app的bulid.gradle输入apply plugin: ‘realm-android’</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'realm-android'</span></span><br></pre></td></tr></table></figure>
<p>★以上操作完成了realm在as的配置了。</p>
<h1 id="Realm_u7684_u6A21_u578B"><a href="#Realm_u7684_u6A21_u578B" class="headerlink" title="Realm的模型"></a>Realm的模型</h1><p>自定义类要继承RealmObject，注意这里必须要有一个无参数的构造方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">RealmObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果类A中包含着其他类的集合这时候要用到ResultList<e>，比如</e></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">RealmObject</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@PrimaryKey</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> RealmList&lt;Dog&gt; mDogRealmList;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>如果你的自定义类已经继承了其他父类，你也可以实现RealmModel来建造realm对象模型。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@RealmClass</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">RealmModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Realm_u6CE8_u89E3_u8BF4_u660E"><a href="#Realm_u6CE8_u89E3_u8BF4_u660E" class="headerlink" title="Realm注解说明"></a>Realm注解说明</h1><p>@RealmClass 当实现RealmModel接口的类要加上这个注解。</p>
<p>@Required 修饰不能为空的成员变量</p>
<p>@Ignore 修饰不写入数据库的变量</p>
<p>@PrimaryKey 设置该成员变量为类的主键</p>
<p>@Index 加快查询速度，不过会让插入数据时变慢</p>
<h1 id="Realm_u521D_u59CB_u5316"><a href="#Realm_u521D_u59CB_u5316" class="headerlink" title="Realm初始化"></a>Realm初始化</h1><p>在自定义Applciation中Realm.init(this);</p>
<p>获取Realm实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">realm = Realm.getDefaultInstance();</span><br></pre></td></tr></table></figure>
<p>这是获取默认配置的Realm，默认保存在data/data/packageName/files/default.realm 你也可以自定义RealmConfiguration，通常是自定义文件名，加密的key，数据库版本号和是否删除合并前的数据等。Realm实现了closeable接口，所以每次的getInstance，到最后关闭使用后都要调用close方法。比如在activity的ondestroy调用realm.close();</p>
<h1 id="Realm_u5199_u5165"><a href="#Realm_u5199_u5165" class="headerlink" title="Realm写入"></a>Realm写入</h1><p>Realm是一个MVCC架构，同一线程的读写操作不影响获取数据，但是多线程读取写入操作就要用到事务来确保获取数据一致性和线程安全。的是放在事务transcation里面执行，确保整个事务的操作都被提交或者全部取消操作调用realm.cancelTranscation();，确保数据的一致性。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">realm = Realm.getDefaultInstance();</span><br><span class="line">realm.beginTransaction();</span><br><span class="line">Dog d=<span class="keyword">new</span> Dog(<span class="string">"a"</span>,<span class="number">1</span>);</span><br><span class="line">Dog b=realm.copyToRealm(d);<span class="comment">//这里的copyToRealm相当于深拷贝了一个d变量。对原来的d变量没任何影响。</span></span><br><span class="line">b.setName(<span class="string">"b"</span>);</span><br><span class="line">realm.commitTransaction(); <span class="comment">//最后往数据库写入一个dog变量b</span></span><br></pre></td></tr></table></figure>
<p>♥copyToRealm会深拷贝一个变量到数据库包括主键，如果主键重复就会抛出异常，拷贝之后主键不能修改。</p>
<p>当两个线程同时进行写入操作，另外一个会造成主线程阻塞，所以要调用异步事务避免主线程阻塞。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步新增数据</span></span><br><span class="line">realm.executeTransaction(<span class="keyword">new</span> Realm.Transaction() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm realm)</span> </span>&#123;</span><br><span class="line">        Dog dog = realm.copyToRealm(<span class="keyword">new</span> Dog(<span class="number">1</span>, <span class="string">"2"</span>, <span class="number">3</span>));</span><br><span class="line">        dog.setName(<span class="string">"pp"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步修改 查询</span></span><br><span class="line">realm.executeTransactionAsync(<span class="keyword">new</span> Realm.Transaction() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm realm)</span> </span>&#123;</span><br><span class="line">        Dog dog = realm.copyToRealm(dogOne);</span><br><span class="line">        dog.setName(<span class="string">"apple"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="keyword">new</span> Realm.Transaction.OnSuccess() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RealmResults&lt;Dog&gt; list = realm.where(Dog.class).findAll();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">"onSuccess: "</span> + list.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>realm的主键，在oncreate方法加入设置主键的RealmObject方法，下次调用oncreate没有判断主键是否exist就加入数据库就会报错。而在oncreate方法没加入没设置主键的realmobject类 ，下次调用oncreate方法就会在自启动数据库文件追加。</p>
<h1 id="Realm__u67E5_u8BE2"><a href="#Realm__u67E5_u8BE2" class="headerlink" title="Realm 查询"></a>Realm 查询</h1><p>查询都是返回一个RealmResults<e>对象支持以下查询条件。</e></p>
<ol>
<li>between()，greaterThan()， lessThan()， greaterThanOrEqualTo() 和lessThanOrEqualTo();</li>
<li>equalTo()和notEqualTo()</li>
<li>contains()，beginsWith()和endsWith()</li>
<li>isNull()和isNotNull()</li>
<li>isEmpty()和isNotEmpty()</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RealmResults&lt;Dog&gt; list=realm.where(Dog.class).lessThan(<span class="string">"age"</span>,<span class="number">1</span>).findAll();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    Log.i(TAG, <span class="string">"execute: "</span>+list.get(i).getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Realm_u4FEE_u6539"><a href="#Realm_u4FEE_u6539" class="headerlink" title="Realm修改"></a>Realm修改</h1><p>修改操作要在一个事务里面完成。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">dog = <span class="keyword">new</span> Dog(<span class="number">1</span>, <span class="string">"a"</span>, <span class="number">1</span>);</span><br><span class="line">      realm.executeTransaction(<span class="keyword">new</span> Realm.Transaction() &#123;</span><br><span class="line">          <span class="annotation">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm realm)</span> </span>&#123;</span><br><span class="line">              dog = realm.copyToRealm(dog);</span><br><span class="line">              dog.setAge(<span class="number">2</span>);</span><br><span class="line">              dog.setName(<span class="string">"kiki"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">              RealmResults&lt;Dog&gt; list = realm.where(Dog.class).equalTo(<span class="string">"id"</span>, <span class="number">1</span>).findAll();</span><br><span class="line">              list.get(<span class="number">0</span>).setName(<span class="string">"ab"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             </span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="RealmResult_u7684changeListener"><a href="#RealmResult_u7684changeListener" class="headerlink" title="RealmResult<E>的changeListener"></a>RealmResult<e>的changeListener</e></h1><p>监听RealmResult内容变化。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">RealmResults&lt;Dog&gt; list = realm.where(Dog.class).lessThan(<span class="string">"id"</span>, <span class="number">3</span>).findAll();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">realm.executeTransaction(<span class="keyword">new</span> Realm.Transaction() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm realm)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Dog dog = realm.createObject(Dog.class);</span><br><span class="line">        dog.setId(<span class="number">2</span>);</span><br><span class="line">        dog.setName(<span class="string">"aaaa"</span>);</span><br><span class="line">        dog.setAge(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">list.addChangeListener(<span class="keyword">new</span> RealmChangeListener&lt;RealmResults&lt;Dog&gt;&gt;() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(RealmResults&lt;Dog&gt; element)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"onChange: "</span> + element.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后需要在activity或者fragment的生命周期比如ondestory调用</span></span><br><span class="line">list.removeChangeListeners();<span class="comment">//删除全部的listener</span></span><br><span class="line">list。removeChangeListener(callback);<span class="comment">//删除一个callback</span></span><br></pre></td></tr></table></figure>
<h1 id="Realm_u7684_u5220_u9664"><a href="#Realm_u7684_u5220_u9664" class="headerlink" title="Realm的删除"></a>Realm的删除</h1><p>继续上面的例子查询id小于3的realmresult集合 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">list.addChangeListener(<span class="keyword">new</span> RealmChangeListener&lt;RealmResults&lt;Dog&gt;&gt;() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(RealmResults&lt;Dog&gt; element)</span> </span>&#123;</span><br><span class="line">        element.deleteFirstFromRealm();<span class="comment">//删除第一条数据</span></span><br><span class="line">        element.deleteAllFromRealm();<span class="comment">//删除全部数据</span></span><br><span class="line">        element.deleteFromRealm(<span class="number">0</span>);<span class="comment">//删除指定数据</span></span><br><span class="line">        element.deleteLastFromRealm();<span class="comment">//删除最后一条数据</span></span><br><span class="line">        element.get(<span class="number">1</span>).deleteFromRealm();<span class="comment">//删除指定obejct</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="Realm_u6DFB_u52A0_u4E00_u4E2Ajson_u5B57_u7B26_u4E32"><a href="#Realm_u6DFB_u52A0_u4E00_u4E2Ajson_u5B57_u7B26_u4E32" class="headerlink" title="Realm添加一个json字符串"></a>Realm添加一个json字符串</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">realm.executeTransaction(<span class="keyword">new</span> Realm.Transaction() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm realm)</span> </span>&#123;</span><br><span class="line">        realm.createObjectFromJson(Dog.class,<span class="string">"&#123;\n"</span> +</span><br><span class="line">                <span class="string">"    \"id\": 1,\n"</span> +</span><br><span class="line">                <span class="string">"    \"name\": \"bili\",\n"</span> +</span><br><span class="line">                <span class="string">"    \"age\": 12\n"</span> +</span><br><span class="line">                <span class="string">"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="copyFromRealm_uFF0CcopyToRealm_u548CcreateObject_u533A_u522B"><a href="#copyFromRealm_uFF0CcopyToRealm_u548CcreateObject_u533A_u522B" class="headerlink" title="copyFromRealm，copyToRealm和createObject区别"></a>copyFromRealm，copyToRealm和createObject区别</h1><ul>
<li>copyFromRealm传入一个RealmObject  拷贝realm数据库中的一个变量并拷贝他的所有属性。</li>
<li>copyToRealm 传入一个Obeject 拷贝这个Object的所有属性到realm数据库中</li>
<li>createObject 传入一个class 并且赋值他的成员变量为默认值null 或者需要后期赋值使用</li>
</ul>
<h1 id="RealmResult__u4F7F_u7528"><a href="#RealmResult__u4F7F_u7528" class="headerlink" title="RealmResult<E> 使用"></a>RealmResult<e> 使用</e></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RealmResults&lt;Dog&gt; list = realm.where(Dog.class).findAll();</span><br><span class="line">  list.sum(<span class="string">"age"</span>);</span><br><span class="line">  list.max(<span class="string">"age"</span>);</span><br><span class="line">  list.min(<span class="string">"age"</span>);</span><br><span class="line">  list.average(<span class="string">"age"</span>);</span><br></pre></td></tr></table></figure>
<p>比如获取dog类的所有对象，求age的总和，最大值，最小值，平均值</p>
<h1 id="DynamicRealm"><a href="#DynamicRealm" class="headerlink" title="DynamicRealm"></a>DynamicRealm</h1><p>DynamicRealm是Realm的变种类，可以操作没继承RealmObject的类，操作类，当然是以字符串的形式操作，而不是RealmObject，他的默认配置少了schema版本号，migration合并信息的检查。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DynamicRealm dynamicRealm = DynamicRealm.getInstance(<span class="keyword">new</span> RealmConfiguration.Builder().build());</span><br><span class="line"> dynamicRealm.executeTransaction(<span class="keyword">new</span> DynamicRealm.Transaction() &#123;</span><br><span class="line">     <span class="annotation">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(DynamicRealm realm)</span> </span>&#123;</span><br><span class="line">         DynamicRealmObject person = realm.createObject(<span class="string">"Person"</span>,<span class="number">1</span>);</span><br><span class="line">         person.setString(<span class="string">"name"</span>, <span class="string">"kik"</span>);</span><br><span class="line">         </span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="Realm_u7684close"><a href="#Realm_u7684close" class="headerlink" title="Realm的close"></a>Realm的close</h1><p>Realm实现了closeable接口，所以每次的getInstance，到最后关闭使用后都要调用close方法。比如在activity的ondestroy调用realm.close();</p>
<p>比如在子线程getIntstance一次，需要在子线程结束前调用一次close();</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Realm realm=Realm.getDefaultInstance();</span><br><span class="line">        </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            realm.close();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Realm__u7248_u672C_u8FC1_u79FB"><a href="#Realm__u7248_u672C_u8FC1_u79FB" class="headerlink" title="Realm 版本迁移"></a>Realm 版本迁移</h1><p>如果realm版本是1，现在要升级realm版本是2并且数据解构改变了比如新增了一个RealmObejct的成员变量，如果default.realm存在旧数据，会升级失败。需要要设置migration合并规则。</p>
<p>要自定义一个RealmConfiguration变量 ，重写migrate方法判断oldVersion是上一个版本号，要做什么需求。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//你还可以做以下操作</span></span><br><span class="line">addField(<span class="string">"key"</span>,<span class="keyword">long</span>.class);<span class="comment">//加一个成员变量key</span></span><br><span class="line">removeField(<span class="string">"key"</span>);<span class="comment">//去掉一个成员变量key</span></span><br><span class="line">addRealmListField(<span class="string">"dogs"</span>,schema.get(<span class="string">"Dog"</span>));<span class="comment">//加上Realmlist变量dogs</span></span><br><span class="line">addRealmObjectField(<span class="string">"dog"</span>,schema.get(<span class="string">"Dog"</span>));<span class="comment">//加上realmobject变量dog</span></span><br><span class="line">transform(<span class="keyword">new</span> RealmObjectSchema.Function()&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(DynamicRealmObject obj)</span></span>&#123;</span><br><span class="line">    obj.set(<span class="string">"fullname"</span>,obj.getString(<span class="string">"firstName"</span>)+<span class="string">" "</span>+obj.getString(<span class="string">"lastName"</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);<span class="comment">//把firstname lastname赋值给fullname</span></span><br></pre></td></tr></table></figure>
<p>比如版本升级加上key</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   RealmMigration mRealmMigration=<span class="keyword">new</span> RealmMigration() &#123;</span><br><span class="line">       <span class="annotation">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">migrate</span><span class="params">(DynamicRealm realm, <span class="keyword">long</span> oldVersion, <span class="keyword">long</span> newVersion)</span> </span>&#123;</span><br><span class="line">           RealmSchema schema=realm.getSchema();</span><br><span class="line"><span class="comment">/*</span><br><span class="line">          //version 0</span><br><span class="line">          class Dog</span><br><span class="line"></span><br><span class="line">           private long id;</span><br><span class="line">           private String name;</span><br><span class="line">           private int age;</span><br><span class="line"></span><br><span class="line">             //version 1</span><br><span class="line">          class Dog</span><br><span class="line">           private long key;</span><br><span class="line">           private long id;</span><br><span class="line">           private String name;</span><br><span class="line">           private int age;</span><br><span class="line"></span><br><span class="line">           */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="comment">//version 0 to version 1</span></span><br><span class="line">           <span class="keyword">if</span>(oldVersion==<span class="number">1</span>)&#123;</span><br><span class="line">               schema.get(<span class="string">"Dog"</span>)</span><br><span class="line">                       .addField(<span class="string">"key"</span>,<span class="keyword">long</span>.class);</span><br><span class="line">                      <span class="comment">/* .addRealmObjectField("dogs",schema.get("Dog"))</span><br><span class="line">                       .addRealmObjectField("dog",schema.get("Dog"));*/</span></span><br><span class="line">               oldVersion++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//最后</span></span><br><span class="line"> realm = Realm.getInstance(PPApplicaion.mMigrationConfiguration);</span><br></pre></td></tr></table></figure>
<h1 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h1><ol>
<li>Realm很多种情况修改数据要配合事务使用。</li>
<li>Realm以一个RealmObject作为一个表的功能。</li>
<li>realm的getInstance和close要结对使用</li>
<li>需要注意RealmResult移除listener</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Realm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java线程中的Runnable，Callable，Future，FutureTask]]></title>
      <url>/2017/02/15/java%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84Runnable%EF%BC%8CCallable%EF%BC%8CFuture%EF%BC%8CFutureTask/</url>
      <content type="html"><![CDATA[<p>前言，在java线程中最常见的是Thread 和Runnable，很少见到或者用到callable等类。但是，你接触过android源码就会经常看到这些类，比如AsyncTask的源码在execute方法源码可以看到了这些类。在面试时也有可能会问到两者的区别，所以现在容许鄙人来介绍一下java中这些类的用法。</p>
<h1 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h1><p>Runnable一个接口类，包括一个run的接口方法：通常我们会自定义一个类去实现Runnable，这时候还可以实现其他接口方法，如果类要是继承Thread就不能再继承其他类了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Runnable 通常配合Thread使用，在run方法里面写耗时的操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// </span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>
<h1 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h1><p>Callable是一个泛型接口，要比Runnable强些 ，因为接口方法call有返回值，并且返回值是传入的泛型类型，还能call的过程中抛出异常。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">  <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>示例要配合Future或者FutureTask来执行。</p>
<h1 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h1><p>Future是一个泛型接口类，是Runnable和Callable的调度容器，就是对Runnable和Callable的结果进行操作，比如：</p>
<ol>
<li>isCancelled()取消操作，call方法任务完成前取消，返回true。</li>
<li>isDone()判断是否操作完成，是则返回true。</li>
<li>get()获取操作结果，会导致程序阻塞，必须等到子线程结束才会得到返回值。</li>
<li>get(long timeout TimeUnit unit)在某时间后获取操作结果，如果在规定时间内获取不到返回值将会抛出超时异常）</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterputeredException,ExecutionExeception</span>;</span><br><span class="line">  <span class="function">V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout ,TimeUnit unit)</span><span class="keyword">throws</span> InterputeredException,ExecutionExeception,TimeoutExeception</span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>比如</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService threadPool=Executors.newSingleThreadExecutor();</span><br><span class="line">Future future=threadPool.submit(<span class="keyword">new</span> Callable&lt;String&gt;()&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"result"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Futurn.get();<span class="comment">//返回操作结果</span></span><br></pre></td></tr></table></figure>
<h1 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h1><p>FutureTask类同时实现了Runnable和Future<v> 两个接口，具有了两个接口的属性。</v></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Callable&lt;V&gt; callable)</span></span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.callable=callable;</span><br><span class="line">       ...</span><br><span class="line">     &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Runnable runnable,V result)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.callable=Executors.callable(runnable,result);</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterputeredException,ExecutionExeception</span>;</span><br><span class="line">  <span class="function">V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout ,TimeUnit unit)</span><span class="keyword">throws</span> InterputeredException,ExecutionExeception,TimeoutExeception</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Runnable</span>,<span class="title">Callable</span>&lt;<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的FutureTask间接实现了两个接口，在FutureTask的构造方法传入Callable或者是Runnable都会转为callable，runnable通过runnableadapter转为callable。同时FutureTask还具备Future的所有方法。</p>
<p>举个例子</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Callable&lt;Integer&gt; callable=<span class="keyword">new</span> Callable&lt;Integer&gt;()&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Ingeter <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">FutureTask&lt;Integer&gt; task=<span class="keyword">new</span> FutureTask&lt;Integer&gt;(callable);</span><br><span class="line"><span class="keyword">new</span> Thread(task).start();</span><br><span class="line"></span><br><span class="line">task.get();<span class="comment">//当然要先启动线程才能得到结果；</span></span><br></pre></td></tr></table></figure>
<p>这里的callable当成runnable用了。</p>
<h1 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h1><ol>
<li><p>Callable比Runnable高级能返回结果值和抛出异常。</p>
</li>
<li><p>可以有上述例子看到Callable来产生结果，Futuretask来获取结果。</p>
</li>
<li><p>在获取结果期间还可以控制是否取消thread 判断thread是否完成。</p>
<p>​</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Java线程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AsyncTask-Analyze]]></title>
      <url>/2017/02/13/AsyncTask-Analyze/</url>
      <content type="html"><![CDATA[<p>我们在初学Android都用过AsyncTask 一个很方便用来请求网络改变UI控件的类。面试官不多不少也会问到AsyncTask的内容，下面来分析一下这个类内部的逻辑。</p>
<h1 id="AsyncTask_u8BF4_u660E"><a href="#AsyncTask_u8BF4_u660E" class="headerlink" title="AsyncTask说明"></a>AsyncTask说明</h1><p>AsyncTask内部封装了Handler和Thread分别原来改变ui线程和在子线程做耗时操作。同时AsyncTask是一个抽象的泛型类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span>&lt;<span class="title">Params</span>,<span class="title">Progress</span>,<span class="title">Result</span>&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>Params代表参数类型（doInBackground的参数）通常是请求的url</li>
<li>Progress代表进度类型（onProgressUpdate的参数）通常是Integer</li>
<li>Result代表结果返回类型（onPostExecute的参数），如果asynctask不需要传递参数就用Void来代替上述三个参数类型</li>
</ol>
<p>AsyncTask 4个核心方法</p>
<ol>
<li>onPreExecute() 异步开始前会执行该方法，用于显示dialog</li>
<li>doInBackground(Params… params) 在线程池执行的异步任务，在此方法内调用publishProgress 传入int进度值来更新进度，返回结果给onPostExecute，这里的省略号是可以传入多个相同类型的参数。</li>
<li>onPorgressUpdate(Progress… progress) 此方法在主线程执行，当任务发生进度改变就会调用此方法，比如显示下载进度</li>
<li>onPostExecute(Result… result) 主线程执行，但异步方法执行完就会调用的方法。传入参数为doInBackground的返回值.</li>
</ol>
<p>ps:  当doInBackground的线程被取消就会回调给onCancelled这个方法，此方法被调用onPostExecute就不会调用了。</p>
<p>总结：</p>
<ol>
<li>asynctask对象要在主线程创建，并调用execute方法</li>
<li>不能直接调用doinbackground方法</li>
<li>一个asynctask对象只执行一次</li>
<li>3.0之前asynctask用并行线程池执行，3.0后asynctask改用串行线程池，当然你可以通过asynctask.executeOnExecutor来并行执行任务</li>
</ol>
<h1 id="u6E90_u7801_u5165_u53E3execute"><a href="#u6E90_u7801_u5165_u53E3execute" class="headerlink" title="源码入口execute"></a>源码入口execute</h1><p>AsyncTask开始执行的方法是在new AsyncTask().execute(url1)，execute又调用了executeOnExetutor方法 传入一个串行的线程池SDefaultExecutor和url参数。以下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@MainThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; execute(Params... params) &#123;</span><br><span class="line">    <span class="keyword">return</span> executeOnExecutor(sDefaultExecutor, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的sDefaultExecute就是new一个SerialExecute类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor SERIAL_EXECUTOR = <span class="keyword">new</span> SerialExecutor();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Executor sDefaultExecutor = SERIAL_EXECUTOR;</span><br></pre></td></tr></table></figure>
<p>进入SerialExecutor类，我们看到这个类有个mTask 里面的Runnable会排队执行。并且判断执行完开始执行下一个任务。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</span><br><span class="line">    Runnable mActive;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</span><br><span class="line">        mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    r.run();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    scheduleNext();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</span><br><span class="line">            scheduleNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            THREAD_POOL_EXECUTOR.execute(mActive);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接来下，回到executeOnExetutor 这个方法里面  我们可以看到一个mStatus来记录当前任务的状态，期间不断改变状态。</p>
<p>每个AsyncTask最先执行onPreExecute方法，然后线程池exec.execute(mFuture);开始执行。这里的mFuture就是一个Runnable</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@MainThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; executeOnExecutor(Executor exec,</span><br><span class="line">        Params... params) &#123;</span><br><span class="line">    <span class="keyword">if</span> (mStatus != Status.PENDING) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (mStatus) &#123;</span><br><span class="line">            <span class="keyword">case</span> RUNNING:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                        + <span class="string">" the task is already running."</span>);</span><br><span class="line">            <span class="keyword">case</span> FINISHED:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                        + <span class="string">" the task has already been executed "</span></span><br><span class="line">                        + <span class="string">"(a task can be executed only once)"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mStatus = Status.RUNNING;</span><br><span class="line"></span><br><span class="line">    onPreExecute();</span><br><span class="line"></span><br><span class="line">    mWorker.mParams = params;</span><br><span class="line">    exec.execute(mFuture);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着将mFuture传入SerialExecutor的execute方法执行，将之前的mFuture对象插入队列mTask里面,判断当前有没有任务在进行，没活动就调用schedulNext方法执行下一个asynctask任务。</p>
<p>Asynctask里面有2个线程池(一个用于排队的serialexecutor和用于真正执行任务的THREAD_POOL_EXECUTOR )和(负责线程调度的)internalHandler</p>
<p> 然后在Asynctask的构造方法 mWork会调用call方法将mTaskInvoked设置为true，再调用doinbackground 得到返回值再调用onpostexecute方法，</p>
<p> 在postResult方法里面会发送message到sHandle来执行finish task还是更新进度条，这里的finish有2种情况分别是调用onCancelled 和onPostexecute.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            mTaskInvoked.set(<span class="keyword">true</span>);</span><br><span class="line">            Result result = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">                <span class="comment">//noinspection unchecked</span></span><br><span class="line">                result = doInBackground(mParams);</span><br><span class="line">                Binder.flushPendingCommands();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable tr) &#123;</span><br><span class="line">                mCancelled.set(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">throw</span> tr;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                postResult(result);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> AsyncTask </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IPC机制基础]]></title>
      <url>/2017/01/19/IPC%E6%9C%BA%E5%88%B6%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="IPC_u57FA_u7840_u5206_u4EAB"><a href="#IPC_u57FA_u7840_u5206_u4EAB" class="headerlink" title="IPC基础分享"></a>IPC基础分享</h1><p><code>这一章主要讲述多进程的作用，序列化和反序列化，Serializable和Parcelable</code></p>
<p>​      <strong>IPC叫进程间通信</strong>，指的是A进程和B进程交换信息。通常一个android应用是一个进程，一个进程有一个主线程和多个子线程组成，在A进程activity定义变量private static int i=1;并且让i+1,输出2，到了B进程activity，获取到的i的值还是1，这是因为Android多进程间不能共享内存。启动多进程期间，会再次启动Application的生命周期，比如application类的oncreate等方法又执行了一次。不过，在android有以下方法进行进程间交换数据</p>
<ol>
<li>bundle（用bundle和intent在两个进程传递数据）</li>
<li>操作文件（读写操作同一个文件）</li>
<li>AIDL（基于binder的通信方式，用aidl文件更加方便）</li>
<li>Messenger（封装后的aidl，只需用Messenger.send(message);即可发送信息）</li>
<li>ContentProvider（读写数据库）</li>
<li>Socket（启动本地的套接字来通信）</li>
</ol>
<h1 id="u591A_u8FDB_u7A0B_u7684_u4F5C_u7528"><a href="#u591A_u8FDB_u7A0B_u7684_u4F5C_u7528" class="headerlink" title="多进程的作用"></a>多进程的作用</h1><ol>
<li><p>把应用某个单独的功能，单独放在一个进程中。</p>
</li>
<li><p>能给应用获取多份内存空间</p>
</li>
</ol>
<h4 id="u5F00_u542F_u591A_u8FDB_u7A0B"><a href="#u5F00_u542F_u591A_u8FDB_u7A0B" class="headerlink" title="开启多进程"></a>开启多进程</h4><p>在AndroidManifest.xml文件给对应的activity或者service设置以下属性，其中值为:remote的进程不能共享进程资源，其他两个值能共享，前提条件是在manifest标签配置相同的sharedUserId比如（android:sharedUserId=”com.ppjun.sharedUserId”），还要让两个应用配置相同的签名。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;android:process=<span class="string">":remote"</span>/&gt;     <span class="comment">//对应的进程名是包名:remote</span></span><br><span class="line">&lt;android:process=<span class="string">".remote"</span>/&gt;    <span class="comment">//对应的进程名是包名.remote</span></span><br><span class="line">&lt;android:process=<span class="string">"com.ppjun.remote"</span>/&gt; <span class="comment">//对应的进程名是com.ppjun.remote</span></span><br></pre></td></tr></table></figure>
<h2 id="u5E8F_u5217_u5316_u548C_u53CD_u5E8F_u5217_u5316"><a href="#u5E8F_u5217_u5316_u548C_u53CD_u5E8F_u5217_u5316" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h2><ol>
<li>序列化就是永久保存对象数据到文件中。</li>
<li>在activity或者service之间将对象序列化对象后通过intent等传递。</li>
<li>在多进程之间也要将对象序列化后才能传递。</li>
</ol>
<p>序列化是一个将对象变成字节的过程，发序列化是将这些字节重组成一个对象的过程。在Android中提供了Serializable和Parcelable接口序列化对象。</p>
<h3 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h3><p>让类实现Serializable接口，并且指定一个long类型的serialVersionUID=xxxxL;xxxx为你自定义值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID=<span class="number">213213123L</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>序列化student</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student student = <span class="keyword">new</span> Student(<span class="string">"jax"</span>);</span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"aa.txt"</span>).getName()));</span><br><span class="line">oos.writeObject(student);</span><br><span class="line">oos.close();</span><br></pre></td></tr></table></figure>
<p>反序列化student</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream ois=<span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"aa.txt"</span>)));</span><br><span class="line">Student student2= (Student) ois.readObject();</span><br><span class="line">ois.close();</span><br></pre></td></tr></table></figure>
<p>此时的student2已经不是原来的student了，是一个新的Student对象了。当然这里没写serialVersionUID序列化和反序列也能成功运行，系统默认会计算出一个serialVersionUID。</p>
<p>当你要在Student类加入id属性加入，此时系统会计算出新的serialVersionUID，发序列化时，两者serialVersionUID不同，反序列操作时就会报错。所以一定要自定义一个serialVersionUID。</p>
<h3 id="Parcelable"><a href="#Parcelable" class="headerlink" title="Parcelable"></a>Parcelable</h3><p>android api为我们提供的序列化类，也是要类实现Parcelable接口，重写带参数的构造方法，writeToParcel方法，describeContents方法和new CREATOR对象呢重写createFromParcel方法和newArray方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;Book&gt; CREATOR = <span class="keyword">new</span> Creator&lt;Book&gt;() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Book <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Book(source);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Book[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Book[size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> bookId;</span><br><span class="line">    <span class="keyword">public</span> String bookName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(<span class="keyword">int</span> bookId, String bookName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookId = bookId;</span><br><span class="line">        <span class="keyword">this</span>.bookName = bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Book</span><span class="params">(Parcel parcel)</span> </span>&#123;</span><br><span class="line">        bookId = parcel.readInt();</span><br><span class="line">        bookName = parcel.readString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">        dest.writeInt(bookId);</span><br><span class="line">        dest.writeString(bookName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBookId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookId</span><span class="params">(<span class="keyword">int</span> bookId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookId = bookId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBookName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookName</span><span class="params">(String bookName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookName = bookName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u4E24_u8005_u6BD4_u8F83"><a href="#u4E24_u8005_u6BD4_u8F83" class="headerlink" title="两者比较"></a>两者比较</h3><ol>
<li>Serializable序列化同时产生大量临时变量，导致gc频繁；Serializable要通过io操作获取获取数据，再写入文件。</li>
<li>Parcelable是以binder为信息载体，在内存传递上开销小。在读写数据时，Parcelable直接在内存读写，所以Parcelable性能比Serializable好。</li>
<li>将对象序列化写入文件，序列化对象进行网络传输建议选择Serializable，对象要在activity等组件传递时，建议选择Parcelable。</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> IPC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java硬软弱虚引用，GC回收，内存碎片]]></title>
      <url>/2017/01/19/Java%E7%A1%AC%E8%BD%AF%E5%BC%B1%E8%99%9A%E5%BC%95%E7%94%A8%EF%BC%8CGC%E5%9B%9E%E6%94%B6%EF%BC%8C%E5%86%85%E5%AD%98%E7%A2%8E%E7%89%87/</url>
      <content type="html"><![CDATA[<h1 id="Java_u786C_u8F6F_u5F31_u865A_u5F15_u7528_uFF0CGC_u56DE_u6536_uFF0C_u5185_u5B58_u788E_u7247"><a href="#Java_u786C_u8F6F_u5F31_u865A_u5F15_u7528_uFF0CGC_u56DE_u6536_uFF0C_u5185_u5B58_u788E_u7247" class="headerlink" title="Java硬软弱虚引用，GC回收，内存碎片"></a>Java硬软弱虚引用，GC回收，内存碎片</h1><h3 id="GarBageCollection"><a href="#GarBageCollection" class="headerlink" title="GarBageCollection"></a>GarBageCollection</h3><p>首先说一下java的gc垃圾回收机制，到底什么时候回收，在哪里回收。</p>
<p>经常说java分别在栈区和堆区存储变量等。其实还有</p>
<h4 id="u7A0B_u5E8F_u8BA1_u6570_u5668"><a href="#u7A0B_u5E8F_u8BA1_u6570_u5668" class="headerlink" title="程序计数器"></a>程序计数器</h4><p>它是一个字节码的指示器，告诉当前线程下一步要执行哪一行代码。一个没有OOm的区域</p>
<h4 id="u6808_u533A"><a href="#u6808_u533A" class="headerlink" title="栈区"></a>栈区</h4><p>又叫java虚拟机栈区，是每一个方法被执行的时候，创建出一个栈帧用来放的成员变量，操作链表，动态链接，方法出口。很多个栈帧又存储在栈区。</p>
<h4 id="u672C_u5730_u65B9_u6CD5_u6808"><a href="#u672C_u5730_u65B9_u6CD5_u6808" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p>如果说栈区是一个java的本地方法栈，那么本地方法栈就就是c++的native栈区</p>
<h4 id="u5806_u533A"><a href="#u5806_u533A" class="headerlink" title="堆区"></a>堆区</h4><p>当类中创建实例变量，就会在堆区中分配内存，堆区又分为新生代，老年代。当新生代没有足够多内存实例对象就是OOM</p>
<h4 id="u65B9_u6CD5_u533A"><a href="#u65B9_u6CD5_u533A" class="headerlink" title="方法区"></a>方法区</h4><p>用来存放被虚拟机加载的类信息，常量，静态变量。</p>
<h4 id="u8FD0_u884C_u65F6_u5E38_u91CF_u6C60"><a href="#u8FD0_u884C_u65F6_u5E38_u91CF_u6C60" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p>运行时常量池用来存放编译期间的常量</p>
<h3 id="u4EC0_u4E48_u65F6_u5019GC"><a href="#u4EC0_u4E48_u65F6_u5019GC" class="headerlink" title="什么时候GC"></a>什么时候GC</h3><ol>
<li>在类中每当我们实例化一个变量时，都会在新生区申请足够的内存，如果申请的内存不足以实例化对象，这时候就会minor GC 小规模的回收。</li>
<li>在太多的对象在老年代，导致没有足够的内存空间加入对象时，就会full GC，并且直到老年代能放得下更大的对象。</li>
<li>每次minor gc都会检查一下进入老年代的对象和老年代剩余空间，如果不够就会full gc</li>
<li>手动执行System.gc();</li>
</ol>
<h3 id="u5185_u5B58_u788E_u7247"><a href="#u5185_u5B58_u788E_u7247" class="headerlink" title="内存碎片"></a>内存碎片</h3><h4 id="u5185_u90E8_u788E_u7247"><a href="#u5185_u90E8_u788E_u7247" class="headerlink" title="内部碎片"></a>内部碎片</h4><p>分配内存到进程A，内存被进程占据了而不被利用，同时系统也无法利用这块内存，直到进程A被终结，释放内存。</p>
<h4 id="u5916_u90E8_u788E_u7247"><a href="#u5916_u90E8_u788E_u7247" class="headerlink" title="外部碎片"></a>外部碎片</h4><p>还没被分配出去的内存太少了不足分配给下一个进程，又或者多个不连续的内存总空间长度能满足新申请的进程，但是由于地址是不连续的内存，无法分配给新进程。</p>
<h3 id="Java_u786C_u8F6F_u5F31_u865A_u5F15_u7528"><a href="#Java_u786C_u8F6F_u5F31_u865A_u5F15_u7528" class="headerlink" title="Java硬软弱虚引用"></a>Java硬软弱虚引用</h3><h4 id="u786C_u5F15_u7528"><a href="#u786C_u5F15_u7528" class="headerlink" title="硬引用"></a>硬引用</h4><p>硬引用是我们用得最普遍的方式，就算应用程序内存不足，需要的内存大于可用的内存发生OOM程序崩溃，也不会去回收这个对象。</p>
<h4 id="u8F6F_u5F15_u7528"><a href="#u8F6F_u5F15_u7528" class="headerlink" title="软引用"></a>软引用</h4><p>当内存足够就不会去回收这个对象，当内存不够就会去回收这个对象把引用对象加入SoftReference对象，把引用赋值成null，手动调用System.gc()，加不加入ReferenceQueue队列取决于内存够不够用。回收对象都会进入ReferenceQueue。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ReferenceQueue&lt;Object&gt; queue=<span class="keyword">new</span> ReferenceQueue&lt;Object&gt;();</span><br><span class="line">Object object =<span class="keyword">new</span> Object();</span><br><span class="line">SoftReference&lt;Object&gt; softReference=<span class="keyword">new</span> SoftReference&lt;&gt;(object,queue);</span><br><span class="line">obj=<span class="keyword">null</span>;</span><br><span class="line">System.gc();</span><br><span class="line">System.out.println(queue.poll());<span class="comment">//查看队列元素</span></span><br></pre></td></tr></table></figure>
<h4 id="u5F31_u5F15_u7528"><a href="#u5F31_u5F15_u7528" class="headerlink" title="弱引用"></a>弱引用</h4><p>当回收器扫描出弱引用不管内存是否够用，都会回收这个对象。把弱引用对象加入WeakReference对象，把引用赋值成null，手动调用System.gc()，到最后的才会加入ReferenceQueue队列。回收对象都会进入ReferenceQueue。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ReferenceQueue&lt;Object&gt; queue=<span class="keyword">new</span> ReferenceQueue&lt;Object&gt;();</span><br><span class="line">Object object =<span class="keyword">new</span> Object();</span><br><span class="line">WeakReference&lt;Object&gt; softReference=<span class="keyword">new</span> WeakReference&lt;&gt;(object,queue);</span><br><span class="line">obj=<span class="keyword">null</span>;</span><br><span class="line">System.gc();</span><br><span class="line">System.out.println(queue.poll());<span class="comment">//查看队列元素</span></span><br></pre></td></tr></table></figure>
<h4 id="u865A_u5F15_u7528"><a href="#u865A_u5F15_u7528" class="headerlink" title="虚引用"></a>虚引用</h4><p>当GC发现了虚引用对象把对象加到PhantomReference对象中，最后将虚引用赋值为null，再手动调用System.gc()，到最后的才会加入ReferenceQueue队列。回收对象都会进入ReferenceQueue。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ReferenceQueue&lt;Object&gt; queue=<span class="keyword">new</span> ReferenceQueue&lt;Object&gt;();</span><br><span class="line">Object object =<span class="keyword">new</span> Object();</span><br><span class="line">PhantomReference&lt;Object&gt; softReference=<span class="keyword">new</span> PhantomReference&lt;&gt;(object,queue);</span><br><span class="line">obj=<span class="keyword">null</span>;</span><br><span class="line">System.gc();</span><br><span class="line">System.out.println(queue.poll());<span class="comment">//查看队列元素</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[帧动画]]></title>
      <url>/2017/01/17/%E5%B8%A7%E5%8A%A8%E7%94%BBAnimation/</url>
      <content type="html"><![CDATA[<h4 id="u5E27_u52A8_u753B"><a href="#u5E27_u52A8_u753B" class="headerlink" title="帧动画"></a>帧动画</h4><p>下面我们来说什么是帧动画。小时候有一种书的右下角把每一个动作画好，再快速的翻看，就可以看到一连串的动画了，这就是帧动画。<br>帧动画只要几张图片就能加载出动画效果了。其中帧动画是按照一定时间间隔显示一张图片。</p>
<h5 id="u5728xml_u8BBE_u7F6E_u5E27_u52A8_u753B"><a href="#u5728xml_u8BBE_u7F6E_u5E27_u52A8_u753B" class="headerlink" title="在xml设置帧动画"></a>在xml设置帧动画</h5><p>具体实现在drawable下（而不是anim下），新建xml文件，用animation-list标签包着多个item标签，设置item标签的drawable和duration值。以imageview为载体可以在xml设置src和在类中用iamgeview.getDrawable获取AnimationDrawable,再调用start方法或者stop方法。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line">&lt;!--android:oneshot="true"设置为true则播放一次动画，false则一直循环播放--&gt;</span><br><span class="line">&lt;animation-list xmlns:android="http://schemas.android.com/apk/res/android"</span><br><span class="line">                android:oneshot="true"&gt;</span><br><span class="line">    &lt;item android:drawable="@mipmap/ic_launcher"</span><br><span class="line">          android:duration="200"</span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;item android:drawable="@mipmap/ic_launcher"</span><br><span class="line">          android:duration="200"</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/animation-list&gt;</span><br></pre></td></tr></table></figure>
<h5 id="u8C03_u7528_u5E27_u52A8_u753B"><a href="#u8C03_u7528_u5E27_u52A8_u753B" class="headerlink" title="调用帧动画"></a>调用帧动画</h5><p>写好xml文件我们就可以在类中通过以下方法来调用动画<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mImageView.setImageResource(R.drawable.frame);</span><br><span class="line">AnimationDrawable drawable = (AnimationDrawable) mImageView.getDrawable();</span><br><span class="line">drawable.start();</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> frameAnimation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[属性动画第一话]]></title>
      <url>/2017/01/17/PropertyAnimation/</url>
      <content type="html"><![CDATA[<h1 id="Android_u5C5E_u6027_u52A8_u753B_uFF08_u7B2C_u4E00_u8BDD_uFF09"><a href="#Android_u5C5E_u6027_u52A8_u753B_uFF08_u7B2C_u4E00_u8BDD_uFF09" class="headerlink" title="Android属性动画（第一话）"></a>Android属性动画（第一话）</h1><h2 id="3-0_u524D_u7684_u5E27_u52A8_u753B_uFF0C_u8865_u95F4_u52A8_u753B"><a href="#3-0_u524D_u7684_u5E27_u52A8_u753B_uFF0C_u8865_u95F4_u52A8_u753B" class="headerlink" title="3.0前的帧动画，补间动画"></a>3.0前的帧动画，补间动画</h2><p>Android动画能给界面带来很炫的效果，如果我们要实现这些效果，在android3.0版本前实现动画主要有2种方式，帧动画（frame animation）和补间动画（tweened animation）。</p>
<p>帧动画加载大量图片，对性能有很大要求效率不高，补间动画是对view进行包括缩放，移动，旋转，透明度的绘制。因为补间动画实现不了动画操作后的view的点击等操作，只是简单在操作后的地方显示一个，并不会加上view原来的属性，比如一个button从父容器左上角移动到右下角，他的点击事件还在左上角。</p>
<h2 id="u4ECB_u7ECD_u5C5E_u6027_u52A8_u753B"><a href="#u4ECB_u7ECD_u5C5E_u6027_u52A8_u753B" class="headerlink" title="介绍属性动画"></a>介绍属性动画</h2><p>为了解决上述问题，新推出了View的属性动画，原理是改变view的属性，所以我们可以操作缩放移动透明度旋转后的view，原理是在一段时间内不断设置View.setRotation()，下面我们来介绍一下ValueAnimator。</p>
<h3 id="ValueAnimator"><a href="#ValueAnimator" class="headerlink" title="ValueAnimator"></a>ValueAnimator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//动画是200毫秒内view由0过渡到1</span></span><br><span class="line">ValueAnimator valueAnimator = ValueAnimator.ofFloat(<span class="number">0f</span>, <span class="number">1f</span>);</span><br><span class="line">valueAnimator.setDuration(<span class="number">200</span>);</span><br><span class="line">valueAnimator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//监听输出动画移动的值</span></span><br><span class="line">        <span class="keyword">float</span> value = (<span class="keyword">float</span>) animation.getAnimatedValue();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">valueAnimator.start();</span><br></pre></td></tr></table></figure>
<p> 生成ValueAnimator的方法除了ValueAnimator.ofFloat(float);参数要精确到小数点后几位，还有ValueAnimator.ofInt(int);参数是整型比如1，100。</p>
<p>ValueAnimator还有其他属性，比如设置延迟时间ValueAnimator.setStartDelay(200);设置延时200毫秒，还有循环次数<br>ValueAnimator.setRepeatCount(5);动画循环5次，又或者是动画播放模式正常ValueAnimator.RESTART还是反向播放的<br>ValueAnimator.setRepeatMode(ValueAnimator.REVERSE);发向播放动画。</p>
<h3 id="ObjectAnimator"><a href="#ObjectAnimator" class="headerlink" title="ObjectAnimator"></a>ObjectAnimator</h3><p>ObjectAnimator继承了ValueAnimator,所以ValueAnimator有的方法ObjectAnimator都有。ObjectAnimator是操作具体的控件比如button，imageview的动画，举几个例子：</p>
<p>图片从x轴的-500的位置移动到100的位置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ObjectAnimator  objectAnimator=ObjectAnimator.ofFloat(mImageView,<span class="string">"translationX"</span>,-<span class="number">500f</span>,<span class="number">100f</span>);</span><br><span class="line">       objectAnimator.setDuration(<span class="number">500</span>);</span><br><span class="line">       objectAnimator.start();</span><br></pre></td></tr></table></figure></p>
<p> 透明度由1变成0再变成1的动画</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ObjectAnimator  objectAnimator=ObjectAnimator.ofFloat(mImageView,<span class="string">"alpha"</span>,<span class="number">1f</span>,<span class="number">0f</span>,<span class="number">1f</span>);</span><br><span class="line">       objectAnimator.setDuration(<span class="number">500</span>);</span><br><span class="line">       objectAnimator.start();</span><br></pre></td></tr></table></figure>
<p> 旋转360度的动画<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ObjectAnimator  objectAnimator=ObjectAnimator.ofFloat(mImageView,<span class="string">"rotation"</span>,<span class="number">0f</span>,<span class="number">360f</span>);</span><br><span class="line">     objectAnimator.setDuration(<span class="number">500</span>);</span><br><span class="line">     objectAnimator.start();</span><br></pre></td></tr></table></figure></p>
<p> y轴上缩放3倍的动画<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ObjectAnimator  objectAnimator=ObjectAnimator.ofFloat(mImageView,<span class="string">"scaleY"</span>,<span class="number">1f</span>,<span class="number">3f</span>);</span><br><span class="line">     objectAnimator.setDuration(<span class="number">500</span>);</span><br><span class="line">     objectAnimator.start();</span><br></pre></td></tr></table></figure></p>
<p>如果你觉得单单实现一种动画还不够炫，如果你想同时实现多个动画，你要用到动画组合AnimatorSet</p>
<h3 id="AnimatorSet"><a href="#AnimatorSet" class="headerlink" title="AnimatorSet"></a>AnimatorSet</h3><p>把多个ObjectAnimator按顺序连接起来，比如把上面的缩放，移动，设置透明度组合起来</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ObjectAnimator  scaleYAnimator=ObjectAnimator.ofFloat(mImageView,<span class="string">"scaleY"</span>,<span class="number">1f</span>,<span class="number">3f</span>);</span><br><span class="line">ObjectAnimator  translationXAnimator=ObjectAnimator.ofFloat(mImageView,<span class="string">"translationX"</span>,<span class="number">0f</span>,<span class="number">100f</span>);</span><br><span class="line">ObjectAnimator  alphaAnimator=ObjectAnimator.ofFloat(mImageView,<span class="string">"alpha"</span>,<span class="number">1f</span>,<span class="number">0f</span>,<span class="number">1f</span>);</span><br><span class="line">AnimatorSet animatorSet=<span class="keyword">new</span> AnimatorSet();</span><br><span class="line">animatorSet.play(scaleYAnimator).with(translationXAnimator).with(alphaAnimator);</span><br><span class="line">animatorSet.setDuration(<span class="number">500</span>);</span><br><span class="line">animatorSet.start();</span><br></pre></td></tr></table></figure>
<p>这里Animator.after将其他动画加到这个动画之后，还可以传入动画设置两个动画的间隔，Animator.with两个动画一起播放，Animator.before插入动画放在这个动画之前。</p>
<h3 id="u52A8_u753B_u76D1_u542C_u5668"><a href="#u52A8_u753B_u76D1_u542C_u5668" class="headerlink" title="动画监听器"></a>动画监听器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ObjectAnimator objectAnimator=ObjectAnimator.ofFloat(mImageView,<span class="string">"scaleY"</span>,<span class="number">1f</span>,<span class="number">3f</span>);</span><br><span class="line">objectAnimator.addListener(<span class="keyword">new</span> Animator.AnimatorListener() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//动画的时候</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//动画结束的时候</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">               <span class="comment">//动画取消时</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">             <span class="comment">//动画循环时</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">     objectAnimator.setDuration(<span class="number">500</span>);</span><br><span class="line">     objectAnimator.start();</span><br></pre></td></tr></table></figure>
<p>你也可以单独实现一个监听方法，这里的AnimatorListener改为AnimatorListenerAdapter就可以了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">objectAnimator.addListener(<span class="keyword">new</span> AnimatorListenerAdapter() &#123;</span><br><span class="line"></span><br><span class="line">       <span class="annotation">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">super</span>.onAnimationEnd(animation);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="u8BBE_u7F6EXML_u52A8_u753B"><a href="#u8BBE_u7F6EXML_u52A8_u753B" class="headerlink" title="设置XML动画"></a>设置XML动画</h3><p>如果有多个界面的控件要实现相同的动画效果，我们可以通过xml更加有效率来设置动画。<br>在res/animator文件夹下新建animator.xml<br>(注意，res/anim这个文件夹是补间动画，res/drawable放帧动画)<br>根标签是一个<objectanimator> 代表一个ObjectAnimator，标签内有duration动画时间，propertyName动画属性translationX，valueFrom原来的值，valueTo变化后的值,valueType值的类型是floatType还是intType这些属性.</objectanimator></p>
<p><set>标签代表一个AnimatorSet,在set标签内默认按照从上到下顺序加载不同的动画（就是在set设置android:ordering=”sequentially”）,如果你想同步进行就设置android:ordering=”together”</set></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line">&lt;set xmlns:android="http://schemas.android.com/apk/res/android"</span><br><span class="line">   android:ordering="sequentially"&gt;</span><br><span class="line">    &lt;objectAnimator</span><br><span class="line">        android:duration="500"</span><br><span class="line">        android:propertyName="scaleY"</span><br><span class="line">        android:valueFrom="100f"</span><br><span class="line">        android:valueTo="1f"</span><br><span class="line">        android:valueType="floatType"</span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;set android:ordering="together"&gt;</span><br><span class="line">        &lt;objectAnimator</span><br><span class="line">            android:duration="500"</span><br><span class="line">            android:propertyName="scaleY"</span><br><span class="line">            android:valueFrom="1f"</span><br><span class="line">            android:valueTo="100f"</span><br><span class="line">            android:valueType="floatType"</span><br><span class="line">        /&gt;</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">&lt;/set&gt;</span><br></pre></td></tr></table></figure>
<p>xml代码写好了，然后实现可以在类中调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Animator animator = AnimatorInflater.loadAnimator(mContext, R.animator.animator);</span><br><span class="line">animator.setTarget(mImageView);</span><br><span class="line">animator.start();</span><br></pre></td></tr></table></figure>
<p>最后通过够用AnimatorInflate.loadAnimator，参数分别是Context和R.animator.animator</p>
<h3 id="ViewPropertyAnimator"><a href="#ViewPropertyAnimator" class="headerlink" title="ViewPropertyAnimator"></a>ViewPropertyAnimator</h3><p>在android3.1系统推出了view通过调用animator方法来设置不同的动画</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mImageView.animate().alpha(<span class="number">0f</span>).setDuration(<span class="number">500</span>);<span class="comment">//这时候不用start即可</span></span><br><span class="line">mImageView.animate().x(<span class="number">100</span>).y(<span class="number">100</span>).setDuration(<span class="number">500</span>);<span class="comment">//这时候不用start即可</span></span><br></pre></td></tr></table></figure>
<p>但是这时候的链接不支持透明度从1f到0f再到1f。就算一个控件多次调用animate().alpha也会以最后一次动画为准。有点鸡肋。</p>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><ol>
<li><p>上述分别讲述了帧动画，补间动画，属性动画的ValueAnimator，ObejectAnimator 和AnimatorSet，还有属性动画的xml写法。</p>
</li>
<li><p>从性能效率上来看，优先考虑使用属性动画。</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> PropertyAnimation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[greenDAO]]></title>
      <url>/2016/11/22/greenDAO/</url>
      <content type="html"><![CDATA[<h1 id="GreenDao"><a href="#GreenDao" class="headerlink" title="GreenDao"></a>GreenDao</h1><p>GreenDao3.1.0使用案例包含（增删查改，升级数据库），3.+版本比2.+更加便捷生成DaoMaster和DaoSession<br><a href="https://github.com/gdmec07120731/GreenDaoTest" target="_blank" rel="external">本文项目地址</a></p>
<p>##首先让你的android studio配置Greendao数据库<br>在build.gradle目录下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    classpath <span class="string">'com.android.tools.build:gradle:2.1.0'</span></span><br><span class="line">    classpath <span class="string">'org.greenrobot:greendao-gradle-plugin:3.1.0'</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在app/build.gradle目录下设置</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'org.greenrobot.greendao'</span></span><br><span class="line">android &#123;</span><br><span class="line">   greendao&#123;</span><br><span class="line">        schemaVersion <span class="number">1</span>                    <span class="comment">//数据库 版本号</span></span><br><span class="line">        targetGenDir <span class="string">'src/main/java'</span>    <span class="comment">//生成DaoMaster类文件夹</span></span><br><span class="line">        daoPackage   <span class="string">'com.ppjun.greendaotest.db'</span>  <span class="comment">//生成DaoMaster类包名</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">'org.greenrobot:greendao:3.1.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新建一个User类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Id</span>(autoincrement = <span class="keyword">true</span>) </span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="annotation">@Property</span>(nameInDb = <span class="string">"username"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="annotation">@Property</span>(nameInDb = <span class="string">"password"</span>)</span><br><span class="line">    <span class="keyword">private</span> String passWord;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//generate set和get方法 toString方法</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>@Entity 代表数据库里面的USER表</li>
<li>@Id 主键 ,autoincrement=true 从0开始自增长。</li>
<li>@Property 表里面的内容</li>
<li>@Unique 唯一的</li>
<li>@Transient 不会被数据库持久化写进数据库 </li>
<li>@NotNull 不为空</li>
</ol>
<p>到此为止，sync gradle来执行greendao配置，下面开始讲解怎么使用</p>
<p>##GreenDao使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_NAME = <span class="string">"ppjun.db"</span>;<span class="comment">//数据库名称</span></span><br><span class="line">DaoMaster.DevOpenHelper helper = <span class="keyword">new</span> DaoMaster.DevOpenHelper(context, DB_NAME, <span class="keyword">null</span>);<span class="comment">//实例化一个DevOpenhelper,相当于sqlit的SQliteOpenHelper</span></span><br><span class="line">DaoMaster daoMaster = <span class="keyword">new</span> DaoMaster(helper.getWritableDb());<span class="comment">//实例化DaoMaster</span></span><br><span class="line">DaoSession daoSession = daoMaster.newSession();<span class="comment">//实例化DaoSession</span></span><br><span class="line">UserDao userDao =daoSession.getUserDao(); <span class="comment">//获取UserDao实例来对表user进行操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//add，这里的null 代表自增长的id，你还可以为user表插入unique的userid</span></span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="keyword">null</span>, <span class="string">"ag1"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="keyword">null</span>, <span class="string">"ag2"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        User user3 = <span class="keyword">new</span> User(<span class="keyword">null</span>, <span class="string">"ag3"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        userDao.insert(user1);</span><br><span class="line">        userDao.insert(user2);</span><br><span class="line">        userDao.insert(user3);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//update，这里更新id是3的user的名字，id从1开始的，在where来添加匹配条件</span></span><br><span class="line">        User user4 = userDao.queryBuilder().where(UserDao.Properties.Id.eq(<span class="number">3</span>)).build().unique();</span><br><span class="line">        user4.setUserName(<span class="string">"kk"</span>);</span><br><span class="line">        userDao.update(user4);</span><br><span class="line"></span><br><span class="line"><span class="comment">//delete，这里删除id是2的user</span></span><br><span class="line">        List&lt;User&gt; userList2 = userDao.queryBuilder().where(UserDao.Properties.Id.eq(<span class="number">2</span>)).build().list();</span><br><span class="line">        <span class="keyword">for</span> (User user5 : userList2)</span><br><span class="line">            userDao.delete(user5);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//query，重新user表全部user</span></span><br><span class="line">        List&lt;User&gt; userList = userDao.queryBuilder().build().list();</span><br><span class="line">        <span class="keyword">for</span> (User user : userList)</span><br><span class="line">            Log.i(TAG, user.toString());</span><br></pre></td></tr></table></figure>
<p>上面完成数据库基本操作。</p>
<p>##下面来说GreenDao的升级数据库，在user表插入age</p>
<p>1、修改build.gradle下面的schemaVersion 2</p>
<p>2、在user类，新增age对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Id</span>(autoincrement = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="annotation">@Property</span>(nameInDb = <span class="string">"age"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="comment">//generate getter and setter &amp; toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、你要新建一个类MyDBHelper继承DaoMaster.OpenHelper,在类的构造函数传入Context，super(context,DB_NAME,null);还要重写onUpgrade方法（注意这里的参数一是Database），然后创建表(传入true，这里使用IF NOT EXISTS)不用担心表不存在，还有执行增加age列sql语句 db.exeSQL(“ALTER TABLE USER ADD COLUMN age”);</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDBHelper</span> <span class="keyword">extends</span> <span class="title">DaoMaster</span>.<span class="title">OpenHelper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDBHelper</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, DB_NAME,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(Database db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onUpgrade(db, oldVersion, newVersion);</span><br><span class="line">        NoteDao.createTable(db,<span class="keyword">true</span>);</span><br><span class="line">        db.execSQL(<span class="string">"ALTER TABLE NOTE ADD COLUMN age"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时候的DaoMaster.DevOpenHelper改为自定义DBHelper，这样子升级数据库就不会丢失原来的数据了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DBHelper dbHelper = <span class="keyword">new</span> DBHelper(context);</span><br><span class="line">DaoMaster daoMaster = <span class="keyword">new</span> DaoMaster(dbHelper.getWritableDb());</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/gdmec07120731/GreenDaoTest" target="_blank" rel="external">本文项目地址</a></p>
]]></content>
      
        
        <tags>
            
            <tag> greendao3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[How to use retrofit2?]]></title>
      <url>/2016/11/21/retrofit/</url>
      <content type="html"><![CDATA[<p><a href="http://square.github.io/retrofit/" target="_blank" rel="external">retrofit2.1</a></p>
<blockquote>
<p>retrofit安全的http客户端for Android和java.</p>
</blockquote>
<h3 id="u5982_u4F55_u4F7F_u7528Retrofit"><a href="#u5982_u4F55_u4F7F_u7528Retrofit" class="headerlink" title="如何使用Retrofit"></a>如何使用Retrofit</h3><p>在app/build.gradle</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.retrofit2:retrofit:2.1.0'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.retrofit2:converter-gson:2.1.0'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.retrofit2:adapter-rxjava:2.1.0'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'io.reactivex:rxandroid:1.2.1'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'io.reactivex:rxjava:1.2.1'</span></span><br></pre></td></tr></table></figure>
<p>新建Git包，含括Git.java ，GitApi.java 和GitService.java</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Git.java（单例类，包括retrofit GitService的实例化）</span><br><span class="line">GitApi<span class="class">.java</span> (请求需要的URl)</span><br><span class="line">GitService<span class="class">.java</span> （各种get post方法）</span><br></pre></td></tr></table></figure>
<h3 id="Git-java"><a href="#Git-java" class="headerlink" title="Git.java"></a>Git.java</h3><ol>
<li><p>新建单例类Git 私有化构造函数， 新建public static final Git mGit;  和public static Git getInstane()的方法</p>
</li>
<li><p>新建全局变量mGitService ，和getService的方法返回mGitService???</p>
</li>
<li><p>在Git的构造函数需要实例化 retrofit主要用到几个参数包括url，okhttpClient，new GsonConverterFactory?RxJavaCallAdapterFactory ，还要实例化GitService。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Git</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Git mInstance = <span class="keyword">new</span> Git();</span><br><span class="line">    <span class="keyword">private</span> GitService mGitService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Git</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        OkHttpClient.Builder client= <span class="keyword">new</span> OkHttpClient().newBuilder();</span><br><span class="line">       OkHttpClient c= setCertificates(client,<span class="keyword">new</span> Buffer().writeUtf8(GitApi.CER).inputStream()).build();</span><br><span class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder().baseUrl(GitApi.BASE_URL)</span><br><span class="line">                .client(c)</span><br><span class="line">                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line">        mGitService = retrofit.create(GitService.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Git <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Git mIns = mInstance;</span><br><span class="line">            <span class="keyword">synchronized</span> (Git.class) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (mIns == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    mIns = <span class="keyword">new</span> Git();</span><br><span class="line">                    mInstance = mIns;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GitService <span class="title">getGitService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mGitService;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
<h3 id="GitApi-java"><a href="#GitApi-java" class="headerlink" title="GitApi.java"></a>GitApi.java</h3><p>这里的URL需要注意要以/结尾 要以/结尾 要以/结尾。这样子GitService注解里面的就不用/开头了</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> BASE_URL=<span class="string">"https://api.github.com/"</span>;</span><br></pre></td></tr></table></figure>
<h3 id="GitService-java"><a href="#GitService-java" class="headerlink" title="GitService.java"></a>GitService.java</h3><p>要写这个类首先学会@GET  @POST  @FormUrlEncoded这些注解。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@GET</span>(<span class="string">"users/&#123;user&#125;/repos"</span>)</span><br><span class="line">Call&lt;List&lt;Repos&gt;&gt; <span class="function">listRepos</span>(<span class="variable">@Path</span>(<span class="string">"user"</span>) String user);</span><br><span class="line"></span><br><span class="line"><span class="variable">@GET</span></span><br><span class="line">Call&lt;String&gt; <span class="function">get</span>(<span class="variable">@Url</span> String url);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">@POST</span></span><br><span class="line"><span class="variable">@FormUrlEncoded</span></span><br><span class="line">Call&lt;GitReturnCode&gt; <span class="function">init</span>(<span class="variable">@Url</span> String url,</span><br><span class="line">                         <span class="variable">@Field</span>(<span class="string">"id"</span>) String id,</span><br><span class="line">                         <span class="variable">@Field</span>(<span class="string">"key"</span>) String key);</span><br></pre></td></tr></table></figure>
<p>详细的各种注解要看这里<a href="http://www.lanyimi.com/2016/10/08/retrofit%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8/">retrofit注解的使用</a></p>
<p>最后在Presenter层调用方法，返回List<repos></repos></p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Git.getInstance().getGitService().listRepos(<span class="string">"gdmec07120731"</span>).enqueue(<span class="keyword">new</span> Callback&lt;List&lt;Repos&gt;&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    <span class="keyword">public</span> void onResponse(<span class="keyword">Call</span>&lt;List&lt;Repos&gt;&gt; <span class="keyword">call</span>, <span class="built_in">Response</span>&lt;List&lt;Repos&gt;&gt; <span class="built_in">response</span>) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="built_in">Log</span>.i(<span class="string">"TAG"</span>, <span class="built_in">response</span>.body().<span class="keyword">get</span>(<span class="number">0</span>).getName());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    <span class="keyword">public</span> void onFailure(<span class="keyword">Call</span>&lt;List&lt;Repos&gt;&gt; <span class="keyword">call</span>, Throwable t) &#123;</span><br><span class="line">                        <span class="built_in">Log</span>.i(<span class="string">"TAG"</span>, t.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> retrofit2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[5mins熟悉mvp架构]]></title>
      <url>/2016/11/01/mvp/</url>
      <content type="html"><![CDATA[<p> MvpDemo<br>简单的mvp架构登录demo，根据功能分包，参考自<a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="external">google mvp</a></p>
<blockquote>
<p>主要面向有mvp经验的读者，阅读时间大约 <strong>5 min</strong></p>
</blockquote>
<p>mvp 的思想是把显示和业务逻辑从activity，fragment这些View中分离。让model和view的通信通过Presenter来搞定，这样子就降低了一个activity成千代码量的可能，以后修改业务逻辑，新增方法只要model层实现好，然后在Presenter层暴露接口给view调用就好了，mvp相比mvc会提项目结构易读性，也有一些不足就是要多写类来协助开发，不太熟悉的同学就会拉慢开发速度。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View&lt;===&gt;Presenter&lt;===&gt;Model</span><br></pre></td></tr></table></figure></p>
<h3 id="u9879_u76EE_u4E3B_u8981_u6709_u4EE5_u4E0B_u7C7B_u7EC4_u6210"><a href="#u9879_u76EE_u4E3B_u8981_u6709_u4EE5_u4E0B_u7C7B_u7EC4_u6210" class="headerlink" title="项目主要有以下类组成"></a>项目主要有以下类组成</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">----login</span><br><span class="line">      |----LoginActivity.java</span><br><span class="line">      |----LoginContract.java</span><br><span class="line">      |----LoginPresenter.java</span><br><span class="line">----BaseView.java</span><br><span class="line">----BasePresenter.java</span><br></pre></td></tr></table></figure>
<h3 id="u65B0_u5EFA_u7C7BBaseView-java"><a href="#u65B0_u5EFA_u7C7BBaseView-java" class="headerlink" title="新建类BaseView.java"></a>新建类BaseView.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseView</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//在view层 给LoginConstract.Presenter赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(T presenter)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u65B0_u5EFA_u7C7BBasePresenter-java"><a href="#u65B0_u5EFA_u7C7BBasePresenter-java" class="headerlink" title="新建类BasePresenter.java"></a>新建类BasePresenter.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BasePresenter</span> </span>&#123;</span><br><span class="line"><span class="comment">//start方法表示进行数据初始化，这方法感觉没用</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这两个base类是所有模块都用到的基类。这里我们就不动它，然后具体某个模块(比如登陆模块用到的方法就在Login这个包里面新建LoginConstract。</p>
<p>然后新建两个接口分别是继承BaseView的view接口，注意这里的BaseView带泛型指向下面同级新建好的Presenter就行了。</p>
<p>以及继承BasePresenter的Presenter接口，把操作ui界面的方法和业务逻辑的方法写进对应的view和presenter接口，就有了下面的LoginConstract类)</p>
<h3 id="u65B0_u5EFA_u7C7BLoginConstract-java"><a href="#u65B0_u5EFA_u7C7BLoginConstract-java" class="headerlink" title="新建类LoginConstract.java"></a>新建类LoginConstract.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginConstract</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">View</span> <span class="keyword">extends</span> <span class="title">BaseView</span>&lt;<span class="title">Presenter</span>&gt;</span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">showProgressBar</span><span class="params">()</span></span>;<span class="comment">//show进度条的方法</span></span><br><span class="line">     <span class="function"><span class="keyword">void</span> hideProgressBar</span><br><span class="line">     <span class="keyword">void</span> <span class="title">onLoginSuccess</span><span class="params">()</span></span>;<span class="comment">//登录成功的方法</span></span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">onLoginError</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">(String username,String password)</span></span>;  <span class="comment">//登录的方法</span></span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u65B0_u5EFA_u7C7BLoginPresenter-java"><a href="#u65B0_u5EFA_u7C7BLoginPresenter-java" class="headerlink" title="新建类LoginPresenter.java"></a>新建类LoginPresenter.java</h3><p>LoginPresenter会实现LoginContract.Presenter接口，在login方法写网络请求的逻辑代码。可以理解为持有view对象，并且操作业务逻辑(登陆，注册，获取列表数据)的类，有一个LoginConstract.View的全局变量mView。这个对象要赋值才能使用，所以我们会在LoginPresenter构造方法给mView赋值。并且在构造函数调用mView的setPresenter给View层的负责登陆业务的Presenter赋值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginPresenter</span> <span class="keyword">implements</span> <span class="title">LoginConstract</span>.<span class="title">Presenter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LoginConstract.View mView;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginPresenter</span><span class="params">(LoginConstract.View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mView = view;</span><br><span class="line">        <span class="keyword">this</span>.mView.setPresenter(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(<span class="keyword">final</span> String username, <span class="keyword">final</span> String password)</span> </span>&#123;</span><br><span class="line">           <span class="comment">//判断username pwd这些参数合法性</span></span><br><span class="line">           <span class="comment">//期间调用mView.showProgressBar();等操作ui的方法</span></span><br><span class="line">           <span class="comment">//发送网络请求</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h3 id="u65B0_u5EFA_u7C7BLoginActivity-java"><a href="#u65B0_u5EFA_u7C7BLoginActivity-java" class="headerlink" title="新建类LoginActivity.java"></a>新建类LoginActivity.java</h3><p>类要实现LoginConstract.View接口，期间会实现大量在LoginConstract.View的ui方法例如showProgressBar()啊。并且有2个全局变量分别是LoginConstract.Presenter类型的mPresenter 和LoginPresenter类型的mLoginPresenter变量。</p>
<ol>
<li><p>在setPresenter要给mPresenter 赋值。</p>
</li>
<li><p>在onCreate要实例化就是要new一个mLoginPresenter，之后才能在点击事件调用login方法拉起登录，在点击事件调用mPresenter.login(…);。</p>
</li>
<li><p>然后就是正常逻辑的initViews() 和initListeners()方法，给控件实例化，和注册点击事件等。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">LoginConstract</span>.<span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LoginConstract.Presenter mPresenter;</span><br><span class="line">    <span class="keyword">private</span> LoginPresenter mLoginPresenter;</span><br><span class="line">    <span class="keyword">private</span> EditText mUsername;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_login);</span><br><span class="line">        initViews();</span><br><span class="line">        initListeners();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initListeners</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mLogin.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                mPresenter.login(mUsername.getText().toString(), mPassword.getText().toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        mUsername = (EditText) findViewById(R.id.ed_username);</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">        mLoginPresenter = <span class="keyword">new</span> LoginPresenter(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(LoginConstract.Presenter presenter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mPresenter = presenter;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>实现了LoginConstract.View接口就要重写setPresenter方法给LoginConstract.Presenter 类型的全局变量赋值。要调用mPresenter.login方法必须先实例化mLoginPresenter这个对象。</p>
<p>注意，mPresenter主要是为了让view绑定Presenter，一定要先实例化mLoginPresenter，因为在LoginPresenter的构造函数中，会传入mView,才会让LoginPresenter的mView有值，执行LoginPresenter里面的login方法不会报错。</p>
<p>&gt;</p>
<blockquote>
<p>注释</p>
</blockquote>
<ul>
<li><p>LoginConstract.View  mView;                    <strong>掌控view操作ui的所有方法的对象</strong>。</p>
</li>
<li><p>LoginConstract.Presenter mPresenter;   <strong>掌控view中操作业务逻辑的所有方法的对象</strong>。</p>
</li>
<li>LoginPresenter mLoginPresenter;            <strong>让view绑定Presenter</strong></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> android.mvp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[5mins接入微信支付]]></title>
      <url>/2016/10/28/5%E5%88%86%E9%92%9F%E6%8E%A5%E5%85%A5%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/</url>
      <content type="html"><![CDATA[<p>现在app最流行微信支付，支付宝支付，都是大部分消费类型app计费方式首选。现在5分钟教你接入微信支付。</p>
<p>接入前请准备好</p>
<ul>
<li>微信appid</li>
<li>微信appkey</li>
<li>微信商户id</li>
<li>微信商户APIkey  需要在商户后台自定义32位key</li>
<li>上传app的签名.jks文件  MD5值</li>
</ul>
<p><a href="https://res.wx.qq.com/open/zh_CN/htmledition/res/dev/download/sdk/WeChatSDK_sample_Android221cbf.zip" target="_blank" rel="external">官网微信支付demo下载链接</a></p>
<h3 id="u914D_u7F6E_u9879_u76EE_u914D_u7F6E_u6587_u4EF6"><a href="#u914D_u7F6E_u9879_u76EE_u914D_u7F6E_u6587_u4EF6" class="headerlink" title="配置项目配置文件"></a>配置项目配置文件</h3><p>首先，把demo中的libammsdk.jar加入项目中libs文件夹，右击as library</p>
<p>AndroidManifest.xml加入权限</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.INTERNET"</span> /&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.MODIFY_AUDIO_SETTINGS"</span>/&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>注册广播接收器</p>
<pre><code>&lt;receiver
           android:name=&quot;包名.AppRegister&quot;&gt;
           &lt;intent-filter&gt;
               &lt;action android:name=&quot;com.tencent.mm.plugin.openapi.Intent.ACTION_REFRESH_WXAPP&quot; /&gt;
           &lt;/intent-filter&gt;
       &lt;/receiver&gt;
</code></pre><p>注册支付结果回调actiivty  ，<strong>此处activity命名规则必须是包名+wxapi.WXPayEntryActivity</strong> ，否则无法得到支付结果。</p>
<pre><code>&lt;activity
        android:name=&quot;包名.wxapi.WXPayEntryActivity&quot;
        android:exported=&quot;true&quot;
        android:launchMode=&quot;singleTop&quot;/&gt;
</code></pre><p>在调用微信支付的activity 的intent-filter标签加上</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;data android:scheme=<span class="string">"微信appid"</span>/&gt;</span><br></pre></td></tr></table></figure>
<h3 id="u8C03_u7528_u652F_u4ED8_u65B9_u6CD5"><a href="#u8C03_u7528_u652F_u4ED8_u65B9_u6CD5" class="headerlink" title="调用支付方法"></a>调用支付方法</h3><p>前提，微信生成预订单prepay_id要在app服务器完成，这样子好处是客户端不保存微信appkey，商户key，商户id等信息让支付更加安全可靠。操作就是客户端把商品名称，金额提交给app服务器返回预订单。</p>
<p>在调用支付方法view定义</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">      <span class="keyword">private</span>  PayReq mReq</span><br><span class="line">      <span class="keyword">private</span>  IWXAPI mWxapi</span><br><span class="line">  	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">           mReq=<span class="keyword">new</span> PayReq();</span><br><span class="line">           mWxapi=WXAPIFactory.createWXAPI(<span class="keyword">this</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="comment">//判断微信是否安装</span></span><br><span class="line">         <span class="keyword">if</span>(!isSupportPay())&#123;</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//向app服务器提交商品名金额，获取预订单，商户id，加密信息，时间戳等后...</span></span><br><span class="line"></span><br><span class="line">           mReq.appId = <span class="string">"appid"</span>;</span><br><span class="line">		  mReq.partnerId = <span class="string">"mch_id"</span>;</span><br><span class="line">		  mReq.prepayId = <span class="string">"prepay_id"</span>;</span><br><span class="line">		  mReq.packageValue = <span class="string">"Sign=WXPay"</span>;</span><br><span class="line">		  mReq.nonceStr =<span class="string">"nonce_str"</span>;</span><br><span class="line">		  mReq.timeStamp = <span class="string">"TimeStamp"</span>;</span><br><span class="line">           mReq.sign = <span class="string">"signParams"</span>;</span><br><span class="line">           mWxapi.registerApp(<span class="string">"appid"</span>);</span><br><span class="line">           mWxapi.sendReq(req);<span class="comment">//拉起微信支付界面</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSupportPay</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(mWxapi.isWXAppInstalled()&amp;&amp;mWxapi.isWXAppSupportAPI())&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	   Toast.makeText(mContext, <span class="string">"请安装最新版微信"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">  WXPayEntryActivity.java</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> IWXAPI wxapi;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WXPayEntryActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">IWXAPIEventHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">         wxapi = WXAPIFactory.createWXAPI(<span class="keyword">this</span>, <span class="string">"wxappid"</span>);</span><br><span class="line">	 wxapi.handleIntent(getIntent(), <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onNewIntent</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onNewIntent(intent);</span><br><span class="line">    wxapi.handleIntent(intent, <span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReq</span><span class="params">(BaseReq req)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//微信通知app客户端</span></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResp</span><span class="params">(BaseResp resp)</span> </span>&#123;</span><br><span class="line"> 	<span class="keyword">if</span> (resp.getType() == ConstantsAPI.COMMAND_PAY_BY_WX) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">switch</span>(resp.errCode)&#123;</span><br><span class="line">     <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">       <span class="comment">//支付成功</span></span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> -<span class="number">1</span>:</span><br><span class="line">       <span class="comment">//未签名app</span></span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> -<span class="number">2</span>:</span><br><span class="line">       <span class="comment">//取消支付</span></span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">       <span class="comment">//支付失败</span></span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u652F_u4ED8_u76F8_u5173_u9519_u8BEF_u7801"><a href="#u652F_u4ED8_u76F8_u5173_u9519_u8BEF_u7801" class="headerlink" title="支付相关错误码"></a>支付相关错误码</h3><p>如果resp.errCode返回-1，此时app签名和微信open平台签名文件的md5值不一致造成，所以要确保app使用open平台相同签名文件。</p>
<p>如遇到其他复杂情况可以清空微信app缓存，进行测试。</p>
]]></content>
      
        
        <tags>
            
            <tag> 微信支付 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EventBus3.0入门]]></title>
      <url>/2016/10/12/EventBus3.0%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus</a>是一个在Android优化很好的事件总线，他简化Android的activity，fragment，thread，Service之间通信，代码体积小，质量更高。</p>
</blockquote>
<p>总之，他可以代替handler发送msg和Message接受msg，还可以代替intent在activity，fragment等传递msg。</p>
<h3 id="u5982_u4F55_u4F7F_u7528EventBus"><a href="#u5982_u4F55_u4F7F_u7528EventBus" class="headerlink" title="如何使用EventBus"></a>如何使用EventBus</h3><p>在app/build.gradle<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'org.greenrobot:eventbus:3.0.0'</span></span><br></pre></td></tr></table></figure></p>
<p>然后在onCreate()注册eventbus，在onDestroy()取消注册。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</span><br><span class="line">  EventBus.getDefault().<span class="keyword">register</span>(MainActivity.<span class="keyword">this</span>);<span class="comment">//注册</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onDestory</span><span class="params">()</span></span>&#123;</span><br><span class="line">  EventBus.getDefault().unregister(MainActivity.<span class="keyword">this</span>);<span class="comment">//取消注册</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同时在注册的界面接受msg，这里的方法名可以自定义，只要方法前有@Subscribe的注解。<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Subscribe</span><br><span class="line"><span class="keyword">public</span> <span class="literal">void</span> getMessage(<span class="built_in">String</span> msg)&#123;</span><br><span class="line">    <span class="keyword">Log</span><span class="built_in">.</span>i(<span class="built_in">TAG</span>,msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>如果有方法注解了@Subscribe，而没先注册就会在日志打印</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">No subscribers registered <span class="keyword">for</span> event class com<span class="class">.ppjun</span><span class="class">.demo</span><span class="class">.MessageEvent</span></span><br><span class="line">No subscribers registered <span class="keyword">for</span> event class org<span class="class">.greenrobot</span><span class="class">.eventbus</span><span class="class">.NoSubscriberEvent</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果actiivty注册了eventbus，而没写一个方法被@Subscribe注解就会报异常</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Subscriber</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">ppjun</span>.<span class="title">amapmaster</span>.<span class="title">BActivity</span> <span class="title">and</span> <span class="title">its</span> <span class="title">super</span> <span class="title">classes</span> <span class="title">have</span> <span class="title">no</span> <span class="title">public</span> <span class="title">methods</span> <span class="keyword"><span class="keyword">with</span></span> <span class="title">the</span> <span class="title">@Subscribe</span> <span class="title">annotation</span></span></span><br></pre></td></tr></table></figure>
<p>其中@Subscribe注解可以有以下几种情况：</p>
<ul>
<li><strong>@Subscribe(sticky = true)</strong></li>
</ul>
<p>代表在activity用postSticky信息之后再注册evnetbus，要用这种sticky=true注解方法来接受msg,因为sticky默认为false的</p>
<ul>
<li><strong>@Subscribe(threadMode = ThreadMode.MAIN)</strong></li>
</ul>
<p>代表主线程或者子线程post信息的到activity的主线程。</p>
<ul>
<li><strong>@Subscribe(threadMode = ThreadMode.BACKGROUND)</strong></li>
</ul>
<p>如果发布线程是主线程，eventbus就会用一个后台子线程发送给主线程，如果发布线程是子线程，那么处理方法就在子线程执行。最后经过或者不经过线程切换都会原来的线程。</p>
<ul>
<li><strong>@Subscribe(threadMode = ThreadMode.POSTING)</strong></li>
</ul>
<p>不需要切换线程，发布线程和处理线程一样。简单来说在什么线程post就在什么线程处理。</p>
<ul>
<li><strong>@Subscribe(threadMode = ThreadMode.ASYNC)</strong></li>
</ul>
<p>处理方法在主线程和发布线程意外的线程执行，处理一些耗时的操作如网络请求。如果有必要还会开启线程池。</p>
<p>   ​</p>
<h3 id="post_u548CpostSticky_u7684_u533A_u522B"><a href="#post_u548CpostSticky_u7684_u533A_u522B" class="headerlink" title="post和postSticky的区别"></a>post和postSticky的区别</h3><p>一般注册后，再post信息要用post，而在没注册前post信息，这时候还没有Subscriber，就要用postSticky。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Aactivity.<span class="function">java</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</span><br><span class="line">  EventBus.getDefault().postSticky(<span class="string">"msg from A"</span>);</span><br><span class="line">  startActivity(<span class="keyword">new</span> Intent(Aactivity.<span class="keyword">this</span>,Bactivity.<span class="keyword">class</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Bactivity.<span class="function">java</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</span><br><span class="line">  EventBus.getDefault().<span class="keyword">register</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">@Subscribe(sticky = <span class="literal">true</span>)   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">     Log.i(TAG,msg);<span class="comment">//这里打印出 msg from A</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestory</span><span class="params">()</span></span>&#123;</span><br><span class="line">  EventBus.getDefault.unregister(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Subscribers_u7684_u4F18_u5148_u7EA7"><a href="#Subscribers_u7684_u4F18_u5148_u7EA7" class="headerlink" title="Subscribers的优先级"></a>Subscribers的优先级</h3><p>要在同一中ThreadMode中 ，默认的priority是0，优先级更高的会被先执行。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Subscribe</span>(priority=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">getMessage</span><span class="params">(String a)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u53D6_u6D88_u8BA2_u9605_u8005Subscriber"><a href="#u53D6_u6D88_u8BA2_u9605_u8005Subscriber" class="headerlink" title="取消订阅者Subscriber"></a>取消订阅者Subscriber</h3><p>通常由优先级更高的订阅者来取消低优先级的订阅者。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="at_rule">@<span class="keyword">Subscribe</span></span><br><span class="line">public void <span class="function">onEvent</span>(String msg)</span>&#123;</span><br><span class="line">  <span class="tag">EventBus</span><span class="class">.getDefault</span>()<span class="class">.cancelEventDelivery</span>(<span class="tag">msg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="EventBus_u7684_u6DF7_u80B4"><a href="#EventBus_u7684_u6DF7_u80B4" class="headerlink" title="EventBus的混肴"></a>EventBus的混肴</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-keepattributes *<span class="constant">Annotation</span>*</span><br><span class="line">-keepclassmembers <span class="class"><span class="keyword">class</span> ** &#123;</span></span><br><span class="line">    <span class="variable">@org</span>.greenrobot.eventbus.<span class="constant">Subscribe</span> &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line">-keep <span class="class"><span class="keyword">enum</span> <span class="title">org</span>.<span class="title">greenrobot</span>.<span class="title">eventbus</span>.<span class="title">ThreadMode</span> &#123; *;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Only required if you use AsyncExecutor</span></span><br><span class="line">-keepclassmembers <span class="class"><span class="keyword">class</span> * <span class="title">extends</span> <span class="title">org</span>.<span class="title">greenrobot</span>.<span class="title">eventbus</span>.<span class="title">util</span>.<span class="title">ThrowableFailureEvent</span> &#123;</span></span><br><span class="line">    &lt;init&gt;(java.lang.<span class="constant">Throwable</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> eventbus </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android studio详细使用]]></title>
      <url>/2016/10/10/AndroidStudio%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</url>
      <content type="html"><![CDATA[<p>Android Studio谷歌官方推荐开发android的编译器，使用更强大的gradle脚本工具，支持Layout Editor更加直观的布局编辑，Constraint layout比relativelayout更加方便的相对布局，Apk Analyzer查看apk中dex体积等。</p>
<p><a href="https://developer.android.com/studio/index.html?hl=zh-cn" target="_blank" rel="external">AndroidStudio下载链接</a></p>
<h3 id="u4E0D_u540C_u4E8Eeclipse_uFF0Cas_u662F_u4EE5_u4E00_u4E2Aproject_u4E3A_u4E00_u4E2A_u7A97_u53E3_u3002"><a href="#u4E0D_u540C_u4E8Eeclipse_uFF0Cas_u662F_u4EE5_u4E00_u4E2Aproject_u4E3A_u4E00_u4E2A_u7A97_u53E3_u3002" class="headerlink" title="不同于eclipse，as是以一个project为一个窗口。"></a>不同于eclipse，as是以一个project为一个窗口。</h3><ul>
<li>选择file-new-new project 新建as项目，</li>
<li>选择file-new-import project 导入eclipse项目，</li>
<li>选择file-open 打开as项目，</li>
<li>选择file-new-Project from Version Control-github 来导入git上的项目。</li>
</ul>
<h3 id="as_u7684_u9879_u76EE_u7ED3_u6784_uFF0Capp_u9879_u76EE_u4E3B_u76EE_u5F55__u3002"><a href="#as_u7684_u9879_u76EE_u7ED3_u6784_uFF0Capp_u9879_u76EE_u4E3B_u76EE_u5F55__u3002" class="headerlink" title="as的项目结构，app项目主目录 。"></a>as的项目结构，app项目主目录 。</h3><ul>
<li>app/libs jar 存放位置，</li>
<li>app/src/java  放java代码，</li>
<li>app/src/res 放图片xml等文件，</li>
<li>app/src/res/mipmap-xhdpi 用来放launcher的logo</li>
<li>app/src/res/drawable-xhdpi 用来放项目用到的图片文件</li>
<li>app/build.gradle 负责定义项目的编译sdk版本，包名，版本号，打包签名，还有jar在maven上的引用。</li>
<li>build.gradle  负责整个引用项目的gradle插件版本。</li>
<li>settings.gradle 包含主项目和moudle项目</li>
</ul>
<h3 id="as_u8BBE_u7F6E"><a href="#as_u8BBE_u7F6E" class="headerlink" title="as设置"></a>as设置</h3><p><strong>as修改包名</strong></p>
<p>选择show option menu就是绿色运行那个三角形下2行的那个齿轮按钮，把Compat Empty middle packages的改为不选中状态，修改包名java/com/xxx.xxx最后修改build.gradle上的applicationId为你的包名。</p>
<p><strong>添加每个java类的头文件</strong></p>
<p>在settings搜索File and Code Templates找到includle -file Header<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Package :$&#123;PACKAGE_NAME&#125;</span><br><span class="line"> <span class="keyword">*</span> Description :</span><br><span class="line"> <span class="keyword">*</span> Author :$&#123;USER&#125;</span><br><span class="line"> <span class="keyword">*</span> Created at :$&#123;DATE&#125; $&#123;HOUR&#125;:$&#123;MINUTE&#125;.</span><br><span class="line"> <span class="keyword">*</span>/</span><br></pre></td></tr></table></figure></p>
<p><strong>自定义代码模板</strong></p>
<p>在settings搜索 Live Templates 点开Android ，点击右上角绿色的加号，，例如我要添加一个swith的代码片段。</p>
<p>在Abbreviation 输入片段的缩写：如switchinit； </p>
<p>在description 输入片段作用的描述：如ontouchevent的switch语句。</p>
<p>然后在Template text输入代码:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">    <span class="keyword">case</span> MotionEvent.<span class="string">ACTION_DOWN:</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MotionEvent.<span class="string">ACTION_MOVE:</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MotionEvent.<span class="string">ACTION_UP:</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>as的快捷键</strong>，我选择default，下面是几个常用的快捷键</p>
<p>Ctrl+Alt+L                                     format code</p>
<p>Alt+Shift+鼠标光标                      多行多光标编辑</p>
<p>Alt+enter                                      解决代码报错，用于强制类型转换，导包，生成方法等</p>
<h3 id="u5F15_u7528aar_u5305"><a href="#u5F15_u7528aar_u5305" class="headerlink" title="引用aar包"></a>引用aar包</h3><p>把aar包复制到libs文件夹下,修改module的build.gradle</p>
<p><strong>注</strong> ：apply plugin:com.android.library的项目才能gengerate出aar</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">repositories&#123;</span><br><span class="line">    flatDir&#123;</span><br><span class="line">        dirs <span class="string">'libs'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies&#123;</span><br><span class="line">  compile(name:<span class="string">'aaa.aar'</span>,ext:<span class="string">'aar'</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u6392_u9664_u4F9D_u8D56"><a href="#u6392_u9664_u4F9D_u8D56" class="headerlink" title="排除依赖"></a>排除依赖</h3><p>但出现依赖冲突时候，可以通过排除依赖解决：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compile (name:<span class="string">'aaa'</span>,ext:<span class="string">'aar'</span>)&#123;</span><br><span class="line">        exclude group:<span class="string">'com.android.support'</span>,module:<span class="string">'recyclerview-v7'</span></span><br><span class="line">&#125;<span class="comment">//这样子可以解决aaa.aar包使用recyclerview，到此项目因为类重复而编译失败.</span></span><br></pre></td></tr></table></figure>
<h3 id="dex_u5206_u5305_uFF08_u89E3_u51B365k_uFF09"><a href="#dex_u5206_u5305_uFF08_u89E3_u51B365k_uFF09" class="headerlink" title="dex分包（解决65k）"></a>dex分包（解决65k）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">buildConfig&#123;</span><br><span class="line"></span><br><span class="line">  multiDexEnable <span class="keyword">true</span></span><br><span class="line">&#125;</span><br><span class="line">dependencies&#123;</span><br><span class="line"></span><br><span class="line">  compile <span class="string">'com.google.support:multidex:1.0.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义application继承MultiDexApplication。即可</span></span><br><span class="line"><span class="comment">//或者在你原来的Application重写attachBaseContext方法加入</span></span><br><span class="line"><span class="comment">//MultiDex.install(this);</span></span><br></pre></td></tr></table></figure>
<h3 id="u79FB_u9664_u6CA1_u7528_u8D44_u6E90"><a href="#u79FB_u9664_u6CA1_u7528_u8D44_u6E90" class="headerlink" title="移除没用资源"></a>移除没用资源</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">buildTpyes&#123;</span><br><span class="line">    release&#123;</span><br><span class="line">        minifyEnable <span class="keyword">true</span></span><br><span class="line">        shrinkResources <span class="keyword">true</span></span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="u5FFD_u7565lint_u9519_u8BEF"><a href="#u5FFD_u7565lint_u9519_u8BEF" class="headerlink" title="忽略lint错误"></a>忽略lint错误</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">  lintOptions&#123;</span><br><span class="line">     abortOnError <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u58F0_u660E_u7F16_u8BD1java_u7248_u672C"><a href="#u58F0_u660E_u7F16_u8BD1java_u7248_u672C" class="headerlink" title="声明编译java版本"></a>声明编译java版本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">   compileOptions&#123;</span><br><span class="line">     sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">     targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u7B7E_u540D_u914D_u7F6E"><a href="#u7B7E_u540D_u914D_u7F6E" class="headerlink" title="签名配置"></a>签名配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">signingConfigs&#123;</span><br><span class="line">  release&#123;</span><br><span class="line">       <span class="function">storeFile <span class="title">file</span><span class="params">(<span class="string">"c:/xx.jks"</span>)</span></span><br><span class="line">       storePassword "123456"</span><br><span class="line">       keyAlias  "xiaom"</span><br><span class="line">       keuPassword "bjuaa"</span><br><span class="line">  &#125;</span><br><span class="line">  debug</span>&#123;</span><br><span class="line">       <span class="function">storeFile <span class="title">file</span><span class="params">(<span class="string">"c:/xx.jks"</span>)</span></span><br><span class="line">       storePassword "123456"</span><br><span class="line">       keyAlias  "xiaom"</span><br><span class="line">       keuPassword "bjuaa"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">buildTypes</span>&#123;</span><br><span class="line"></span><br><span class="line">  release&#123;</span><br><span class="line">            <span class="function">minifyEnabled <span class="keyword">true</span></span><br><span class="line">            useProguard <span class="keyword">false</span></span><br><span class="line">            shirkResources <span class="keyword">true</span></span><br><span class="line">            proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[retrofit注解使用]]></title>
      <url>/2016/10/08/retrofit%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>在用到retrofit请求json时，通常在GankService.java类用到@GET，@POST，@Path这些注解，具体怎么用，可以看看下面。</p>
<h3 id="@GET"><a href="#@GET" class="headerlink" title="@GET"></a>@GET</h3><p> 用于get请求</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="at_rule">@<span class="keyword">GET("user")</span></span><br><span class="line">Observable&lt;Result&gt; <span class="function">getUsers</span>()</span>;</span><br></pre></td></tr></table></figure>
<h3 id="@Query"><a href="#@Query" class="headerlink" title="@Query"></a>@Query</h3><p>用于url后面?key=value</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@GET</span>(<span class="string">"user"</span>)</span><br><span class="line">Observable&lt;Result&gt; <span class="function">getUsers</span>(<span class="variable">@Query</span>(<span class="string">"id"</span>) String userId);</span><br></pre></td></tr></table></figure>
<p>相当于</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="at_rule">@<span class="keyword">GET("user?id=userId")</span></span><br><span class="line">Observable&lt;Result&gt; <span class="function">getUsers</span>()</span>;</span><br></pre></td></tr></table></figure>
<h3 id="@Field"><a href="#@Field" class="headerlink" title="@Field"></a>@Field</h3><p>@POST 用于post请求，我们通常都是post一个表单形式的参数。这时候就用到@Field来连接键值对，@FormUrlEncoded来告诉服务器这是表单提交参数。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@FormUrlEncoded</span></span><br><span class="line"><span class="variable">@POST</span>(<span class="string">"user"</span>)</span><br><span class="line">Observable&lt;Result&gt; <span class="function">getUsers</span>(<span class="variable">@Field</span>(<span class="string">"id"</span>) String userId);</span><br></pre></td></tr></table></figure>
<h3 id="@Body"><a href="#@Body" class="headerlink" title="@Body"></a>@Body</h3><p>会把自定义对象，作为requestbody，并转换成指定格式。</p>
<p>好像依赖了这个包com.squareup.retrofit2:converter-gson  就会被gson转换成json格式。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@POST</span>(<span class="string">"users/new"</span>)</span><br><span class="line">Call&lt;User&gt; <span class="function">createUser</span>(<span class="variable">@Body</span> User user);</span><br></pre></td></tr></table></figure>
<h3 id="@Part"><a href="#@Part" class="headerlink" title="@Part"></a>@Part</h3><p>part和multipart一起使用，用于文件上传</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Multipart</span><br><span class="line">@PUT(<span class="string">"user/photo"</span>)</span><br><span class="line">Call&lt;User&gt; updateUser(@<span class="keyword">Part</span> MultipartBody.<span class="keyword">Part</span> photo, @<span class="keyword">Part</span>(<span class="string">"description"</span>) RequestBody description);</span><br><span class="line"></span><br><span class="line"><span class="keyword">File</span> file=new <span class="keyword">File</span>(<span class="keyword">Environment</span>.getExternalStorageDirectory(),<span class="string">"aa.png"</span>);</span><br><span class="line">RequestBody body=RequestBody.create(MediaType.parse(<span class="string">"image/png"</span>),file);</span><br><span class="line">MultipartyBody.<span class="keyword">Part</span> photo=MultipartBody.<span class="keyword">Part</span>.createFromData(<span class="string">"photo"</span>,<span class="string">"icon.png"</span>,body);</span><br></pre></td></tr></table></figure>
<h3 id="@PartMap"><a href="#@PartMap" class="headerlink" title="@PartMap"></a>@PartMap</h3><p>用于多个文件上传，多个MultipartBody<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Multipart</span><br><span class="line">@PUT(<span class="string">"user/photo"</span>)</span><br><span class="line">Call&lt;User&gt; updateUser(@PartMap <span class="keyword">Map</span>&lt;<span class="typename">String</span> RequestBody&gt; <span class="keyword">map</span>, @Part(<span class="string">"description"</span>) RequestBody description);</span><br><span class="line"></span><br><span class="line"><span class="keyword">File</span> file1=<span class="keyword">new</span> <span class="keyword">File</span>(Environment.getExternalStorageDirectory(),<span class="string">"aa.png"</span>);</span><br><span class="line"><span class="keyword">File</span> file2=<span class="keyword">new</span> <span class="keyword">File</span>(Environment.getExternalStorageDirectory(),<span class="string">"bb.png"</span>);</span><br><span class="line">RequestBody body1=RequestBody.create(MediaType.parse(<span class="string">"image/png"</span>),file1);</span><br><span class="line">RequestBody body2=RequestBody.create(MediaType.parse(<span class="string">"image/png"</span>),file2);</span><br><span class="line"><span class="keyword">Map</span>&lt;<span class="typename">String</span> ,RequestBody&gt; <span class="keyword">map</span>=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">map</span>.put(<span class="string">"photos"</span>,body1);</span><br><span class="line"><span class="keyword">map</span>.put(<span class="string">"photo2"</span>,body2);</span><br></pre></td></tr></table></figure></p>
<h3 id="@Hearders"><a href="#@Hearders" class="headerlink" title="@Hearders"></a>@Hearders</h3><p>设置头文件内容</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Headers</span>(<span class="string">"Cache-Control: max-age=640000"</span>)</span><br><span class="line"><span class="variable">@GET</span>(<span class="string">"widget/list"</span>)</span><br><span class="line">Call&lt;List&lt;Widget&gt;&gt; <span class="function">widgetList</span>();</span><br></pre></td></tr></table></figure>
<p>如果你要设置头文件多个内容</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Headers</span>(&#123;</span><br><span class="line">    <span class="string">"Accept: application/vnd.github.v3.full+json"</span>,</span><br><span class="line">    <span class="string">"User-Agent: Retrofit-Sample-App"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="@Header"><a href="#@Header" class="headerlink" title="@Header"></a>@Header</h3><p>设置头文件内容</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@GET</span>(<span class="string">"user"</span>)</span><br><span class="line">Call&lt;User&gt; <span class="function">getUser</span>(<span class="variable">@Header</span>(<span class="string">"Authorization"</span>) String authorization);</span><br></pre></td></tr></table></figure>
<p>等价于</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Headers</span>(<span class="string">"Authorization :Authorization"</span>)</span><br><span class="line"><span class="variable">@GET</span>(<span class="string">"user"</span>)</span><br><span class="line">Call&lt;User&gt; <span class="function">getUser</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> retrofit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android hotfix]]></title>
      <url>/2016/08/15/Android%E7%83%AD%E4%BF%AE%E5%A4%8D/</url>
      <content type="html"><![CDATA[<h2 id="Android_u70ED_u4FEE_u590D"><a href="#Android_u70ED_u4FEE_u590D" class="headerlink" title="Android热修复"></a>Android热修复</h2><blockquote>
<p>热修复就是在用户运行app时候不知不觉，将apk里面错误代码纠正，无需再重新从应用市场下载最新版本。而且还有减少了开发者从打多个渠道包，上架多个应用渠道的工作。</p>
</blockquote>
<h3 id="u70ED_u4FEE_u590D_u539F_u7406"><a href="#u70ED_u4FEE_u590D_u539F_u7406" class="headerlink" title="热修复原理"></a>热修复原理</h3><p>首先你的app必须经过分包（在eclipse你可以自定义ant分包，在as你可以用multix分包），把Application和Mainactivity放在主classes.dex，把Bug.class放在Classes2.dex，要修改Bug.class内容只要执行dx.bat命令得到新的Classes2.dex文件，在app正常运行时，使用ClassLoader加载类方法。</p>
<p>BaseDexClassLoader子类分为PathClassLoader加载已安装到系统的apk和DexClassLoader可以加载未安装到系统的jar、dex和apk。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#baseDexClassLoader</span><br><span class="line">  protected Class&lt;?&gt; findClass(String name)throws ClassNotFoundException&#123;</span><br><span class="line">   Class clazz=pathList.findClassLIE(name);</span><br><span class="line">  if(clazz==null)</span><br><span class="line">    throw new ClassNotFoundException(name);</span><br><span class="line">  return clazz;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#DexPathList</span><br><span class="line">  public Class findClass(String name)&#123;</span><br><span class="line">     for(Element element:dexElements)&#123;</span><br><span class="line">  if(dex!=null)&#123;</span><br><span class="line">  Class clazz=dex.loadClassBinaryName(name,definingContext);</span><br><span class="line">    if(clazz!=null)&#123;</span><br><span class="line">  return clazz;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#DexFile</span><br><span class="line">  public Class loadClassBinaryName(String name,ClassLoader loader)&#123;</span><br><span class="line">  return defineClass(name,loader,mCookie);</span><br><span class="line">&#125;</span><br><span class="line">private native static Class defineClass(String name,ClassLoader loader,int cookie);</span><br></pre></td></tr></table></figure>
<p>一个ClassLoader可以包含多个dex文件，每个dex文件是一个element，多个dex组成一个有序的dexElement数组，当找类的时候会遍历整个数组来找，如果在当前dex找到类了，就返回该类，不去其他dex找类了，所以补丁dex放在最前面遍历，不会覆盖这个类。</p>
<p>这里还有一个CLASS_ISPREVERIFIED 问题就是有其他类引用到Bug.class 要取消CLASS_ISPREVERIFIED 标记其他类。</p>
<h3 id="CLASS_ISPREVERIFIED__u662F_u4EC0_u4E48_uFF1F"><a href="#CLASS_ISPREVERIFIED__u662F_u4EC0_u4E48_uFF1F" class="headerlink" title="CLASS_ISPREVERIFIED 是什么？"></a>CLASS_ISPREVERIFIED 是什么？</h3><p>A类调用到B类方法 AB都在同一个在同一个dex里面 A类就会打上CLASS_ISPREVERIFIED标记</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[android插件开发]]></title>
      <url>/2016/08/09/Android%E4%B8%AD%E7%9A%84%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<blockquote>
<p>插件化的好处就是满足各类用户的特定需求，动态加载内容。好像锤子桌面里面有很多主题，如主题ABCD有的人喜欢安装A，有的人喜欢安装C这时候就用到插件开发，又比如qq有很多皮肤，有的是商务皮肤，有的是可爱皮肤，有的是运动皮肤，根据个人爱好下载不同的皮肤。</p>
</blockquote>
<p>想获取已安装的app的apk，路径就在data/app/包名-1/base.apk  qq就是这样子发送已安装的apk</p>
<h2 id="u4EE5_u52A0_u8F7Dapk_u4E3A_u4F8B_u5B50"><a href="#u4EE5_u52A0_u8F7Dapk_u4E3A_u4F8B_u5B50" class="headerlink" title="以加载apk为例子"></a>以加载apk为例子</h2><p>插件可以以zip jar dex apk等形式存在，首先下载好插件的apk到你app缓存根目录</p>
<p>加载<strong>已安装的apk</strong>获取里面的资源文件先获取插件apk的context再获取里面资源。可以用到Context pluginContext=this.createPackageContext(“包名”,flag);</p>
<p>加载未安装的apk呢就用DexClassLoader</p>
<h2 id="u539F_u7406"><a href="#u539F_u7406" class="headerlink" title="原理"></a>原理</h2><p>原理根据是普通apk里面的getResoure.getDrawable(R.drawable.bg);getResource肯定有获取apk资源的方法。查看系统代码发现 getResource里面根据AssetManager添加自己apk的路径返回resource，通过resource就可以访问R文件下的所有对象属性。</p>
<p>这里只要新建一个pluginResurces继承Resources和AssetManager.</p>
<p>让AssetManager.addAssetPath为插件apk的路径，通过pluginResurces构造函数实例化pluginResurces，插件Reources有了，就差插件R文件里面的属性id，</p>
<p>根据DexClassloader加载包名+R$drawable 获取class 再获取field判断field和插进R文件的属性相同就int drawableId=field.getInt(R.drawable.class);</p>
<p>Drawable drawable= resource.getDrawable(drawableId);然后你的按钮就可以设置background了。</p>
]]></content>
      
        
        <tags>
            
            <tag> 插件开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java反射]]></title>
      <url>/2016/07/15/Java%E5%8F%8D%E5%B0%84/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Java反射</p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&amp;mid=2650236432&amp;idx=1&amp;sn=1da63ff74cb6082ffe3df5f344f9f5f1&amp;scene=0#wechat_redirect" target="_blank" rel="external">http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&amp;mid=2650236432&amp;idx=1&amp;sn=1da63ff74cb6082ffe3df5f344f9f5f1&amp;scene=0#wechat_redirect</a></p>
</blockquote>
<h1 id="Java_u53CD_u5C04"><a href="#Java_u53CD_u5C04" class="headerlink" title="Java反射"></a>Java反射</h1><h2 id="u52A8_u6001_u8BED_u8A00"><a href="#u52A8_u6001_u8BED_u8A00" class="headerlink" title="动态语言"></a>动态语言</h2><p>程序运行时，通过代码能改变程序结构或变量类型的语言，一般为动态语言。例如Perl,Python,Ruby是动态语言，反之c++,java,C#是静态语言。java有个特点能在运行时加载，编译期间完全未知的class。就是java程序运行时可以加载未知名称的class，获取类的构造方法，类属性，类方法。</p>
<h2 id="java_u53CD_u5C04"><a href="#java_u53CD_u5C04" class="headerlink" title="java反射"></a>java反射</h2><p>要让java程序运行，就要让java类被java虚拟机加载，java不被虚拟机加载，就不能正常运行。正常情况下，我们运行的所有程序在编译期间已经把那个类加载好了。<strong>java反射就是在程序编译期间不加载用到的类，而在程序运行的时候才加载这个类</strong>。使用的是在编译期并不知道的类。</p>
<h2 id="u53CD_u5C04_u7684_u4F5C_u7528"><a href="#u53CD_u5C04_u7684_u4F5C_u7528" class="headerlink" title="反射的作用"></a>反射的作用</h2><p>如果AB两个程序员合作，A写程序时用到B写的类，如果B没写A用到的类，A的代码就不能通过编译了，此时用到java反射机制，就可以让A在获取不到B写的类是，来让自己代码通过编译，就是在运行时才加载用到类。</p>
<h2 id="u53CD_u5C04_u7684_u5B9E_u8D28"><a href="#u53CD_u5C04_u7684_u5B9E_u8D28" class="headerlink" title="反射的实质"></a>反射的实质</h2><p> java反射会将代码解析成java类，要使用java反射就要用到Class（大写C）这个类，当一个java类被加载,java虚拟机就会自动生成一个Class对象，通过Class对象我们就能获取加载到java虚拟机当前Class对象的构造方法，类方法，类属性。<strong>在运行期间拿到这个类的构造方法类属性和类方法</strong></p>
<h2 id="u53CD_u5C04_u7684_u4F7F_u7528"><a href="#u53CD_u5C04_u7684_u4F7F_u7528" class="headerlink" title="反射的使用"></a>反射的使用</h2><p>获取本apk的类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class clazz=ClassLoader.getSystemClassLoader().loadClass(<span class="string">"com.ppjun.Test"</span>);<span class="comment">//通过系统的   ClassLoader来加载Class，返回Class对象</span></span><br><span class="line"></span><br><span class="line">Coustructor constructor=clazz.getConstructor(String.class);<span class="comment">//获取构造函数，参数是String类型</span></span><br><span class="line"></span><br><span class="line"> Object obj=constructor.newInstance(<span class="string">"ppjun"</span>); <span class="comment">//往构造函数传入参数ppjun</span></span><br><span class="line"></span><br><span class="line">Method method=clazz.getMethod(<span class="string">"display"</span>,<span class="keyword">null</span>);<span class="comment">//获取clazz对象叫display的方法，没有返回值</span></span><br><span class="line"></span><br><span class="line">method.invoke(obj,<span class="keyword">null</span>);<span class="comment">//执行display的方法，会输出ppjun`</span></span><br></pre></td></tr></table></figure>
<p>反射也可以在A.apk 调用B.apk的方法</p>
<p>首先在A.apk写一个类Share</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Share</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> Log.i(<span class="string">"display"</span>,<span class="string">"from A.apk"</span>)&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后再AndroidManifest的MainActivity的<intent-filter>声明</intent-filter></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;action android:name=<span class="string">"com.ppjun"</span>&gt;</span><br></pre></td></tr></table></figure>
<p>来扑抓这个activity</p>
<p>在B.apk</p>
<p>调用以下方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getFromRemote</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   Intent intent=<span class="keyword">new</span> Intent(<span class="string">"com.ppjun"</span>);</span><br><span class="line"></span><br><span class="line">   PackageManager pm=getPackageManager();</span><br><span class="line"></span><br><span class="line">   List&lt;ResolveInfo&gt; resolveInfos=pm.queryIntentActivities(intent,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">   ResolveInfo resolveInfo=resolveInfos.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">   ActivityInfo activityInfo=resolveInfo.activityInfo;</span><br><span class="line"></span><br><span class="line">   String packageName=activityInfo.packageName;</span><br><span class="line"></span><br><span class="line">   String dexPath=activityInfo.applicationInfo.sourceDir;</span><br><span class="line"></span><br><span class="line">   String dexOutputDir=getApplicationInfo().dataDir;</span><br><span class="line"></span><br><span class="line">   String nativeLibraryDir=activityInfo.applicationInfo.nativeLibraryDir;</span><br><span class="line"></span><br><span class="line">   ClassLoader classLoader=getClassLoader();</span><br><span class="line"></span><br><span class="line">   DexClassLoader dc1=<span class="keyword">new</span> DexClassLoader(dexPath,dexOutputDir,nativeLibraryDir,classLoader);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">   Class&lt;?&gt; clazz=dcl.loadClass(packageName+<span class="string">".Share"</span>);</span><br><span class="line"></span><br><span class="line">   Constructor&lt;?&gt; constructor=clazz.getConstructor();</span><br><span class="line"></span><br><span class="line">    Object o=constructor.newInstance();</span><br><span class="line"></span><br><span class="line">   Method display=clazz.getMethod(<span class="string">"display"</span>,String.class);</span><br><span class="line"></span><br><span class="line">   display.invoke(o,<span class="string">"ppjun"</span>)</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"></span><br><span class="line">   e.printStackTrace();</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> java反射 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git常用命令]]></title>
      <url>/2016/05/31/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="Git_u547D_u4EE4"><a href="#Git_u547D_u4EE4" class="headerlink" title="Git命令"></a>Git命令</h3><ol>
<li><p>git config –global user.name “username” </p>
<p>git config –global user.email “email”  这两句会帮你电脑的所有git项目都和你账号关联起来，当然你可以不要–global，就让当前项目和git关联起来</p>
</li>
<li><p>git init 新建.git到当前文件夹</p>
</li>
<li><p>git status 查看当前项目文件状态，有没有修改，有没有加入缓冲区等。</p>
</li>
<li><p>git clone xxx.git 克隆项目到本地</p>
</li>
<li><p>git add . 添加全部文件到缓存区</p>
</li>
<li><p>git commit -m “注释”  添加注释</p>
</li>
<li><p>git log 查看注释</p>
</li>
<li><p>git log –pretty=oneline 单行输出log</p>
</li>
<li><p>git push -u origin master 第一次提交项目的到远程仓库</p>
</li>
<li><p>git push origin master  再次提交项目代码到远程仓库上</p>
</li>
<li><p>git tag xx 给当前分支创建一个tag 以后就能退回到这个tag的代码了</p>
</li>
<li><p>git branch 查看当前分支 *master指向master分支</p>
</li>
<li><p>git branch a 创建 a分支</p>
</li>
<li><p>git checkout a 转到a分支</p>
</li>
<li><p>git branch -b a 创建并转到a分支</p>
</li>
<li><p>git branch -d a 删除a分支</p>
</li>
<li><p>git branch -D a 在没有合并分支代码到master代码，或者无法删除分支时，强制删除分支a</p>
</li>
<li><p>git merga 合并代码先转到master分支，再git merga a 的分支代码到master分支代码 </p>
</li>
<li><p>git checkout tagname 让分支代码回到tag是tagname那时候的代码</p>
<p><strong>更新时间 2016年10月18日16:44:56</strong></p>
</li>
<li><p>git checkout – readme.txt  文件没提交到缓冲区时，让readme.txt回到修改前。</p>
</li>
<li><p>git reset HEAD readme.txt 让提交文退出缓冲区，再执行git checkout – readme.txt，回到修改前。</p>
</li>
<li><p>git remote add origin git@github… 添加文件夹到远程仓库</p>
</li>
<li><p>git merge –no-ff -m “merge with no-ff” dev 不删除dev分支，并把dev分支，合并到当前分支。</p>
</li>
<li><p>git reflog 查看全部历史commit信息</p>
</li>
<li><p>git reset –hard 63D232 回到 63D232 那一步</p>
</li>
<li><p>git stash 当你添加新功能一半时，要修补bug，你要想把dev分支保存起来，新增修复issure分支，合并到dev分支，在合并到master分支，最后了来到dev分支，把当时stash起来的 内容用git stash pop 恢复回来。</p>
</li>
<li><p>git remote -v 查看远程仓库的信息</p>
</li>
<li><p>git push origin branch-name 提交的到远程分支</p>
</li>
<li><p>git checkout -b branch-name origin/branch-name 创建远程分支。</p>
</li>
<li><p>git branch –set-upstream branch-name origin/branch-name 关联本地分支和远程分支</p>
</li>
<li><p>git pull 更新本地分支</p>
</li>
<li><p>创建tag 就是为了方便取出tag名的版本，实际是利用hard到特定的commit号，例如232EDE，分支是移动的 ，tag是不能移动的。</p>
</li>
<li><p>git tag 查看该分支的所有tag</p>
</li>
<li><p>给固定的commit id打上tag</p>
</li>
<li><p>首先用git log –pretty=oneline –abbrev-commit查看全部commit id</p>
</li>
<li><p>git tag v1.2 3622EE </p>
</li>
<li><p>git show v1.0 查看v1.0标签信息，包括commit id  author</p>
</li>
<li><p>git tag -a <tagname> -m “tips” commit id  创建的标签都是在本地，不会自动推送的远程，</tagname></p>
</li>
<li><p>git tag -d v1.0 删除指定tag，先删除本地tag，再删除远程tag</p>
</li>
<li><p>git push origin v1.0 推送指定标签到远程</p>
</li>
<li><p>git push origin –tags 推送全部标签到远程</p>
</li>
<li><p>git push origin :refs/tags/v0.9</p>
</li>
<li><p>git clone git@github.com xxx.git 克隆远程仓库项目到本地、</p>
</li>
<li><p>git config –global color.ui true 界面文字多彩颜色</p>
</li>
<li><p>在项目根目录下编辑.gitignore文件，要忽略的文件放进去。一般是忽略程序编辑生产的文件，还有你不想提交远程仓库的文件</p>
</li>
</ol>
<h3 id="u7528SSH_u8FDC_u7A0B_u63D0_u4EA4_u4EE3_u7801"><a href="#u7528SSH_u8FDC_u7A0B_u63D0_u4EA4_u4EE3_u7801" class="headerlink" title="用SSH远程提交代码"></a>用SSH远程提交代码</h3><p>打开git bash就是git自带的终端，输入ssh</p>
<pre><code>Rc3@ppjun MINGW64 ~/Desktop

 $ ssh

 usage: ssh [-1246AaCfGgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]
       [-D [bind_address:]port] [-E log_file] [-e escape_char]
       [-F configfile] [-I pkcs11] [-i identity_file]
       [-L address] [-l login_name] [-m mac_spec]
       [-O ctl_cmd] [-o option] [-p port]
       [-Q cipher | cipher-auth | mac | kex | key]
       [-R address] [-S ctl_path] [-W host:port]
       [-w local_tun[:remote_tun]] [user@]hostname [command]``
</code></pre><p>这是代表你已安装ssh。</p>
<p>输入命令ssh-keygen -t rsa生成ssh密钥，连续按三个Enter</p>
<pre><code>Rc3@ppjun MINGW64 ~/Desktop
$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/c/Users/Rabbit/.ssh/id_rsa):
</code></pre><p>打开C:\Users\Rabbit.ssh 找到id_rsa.pub<br>复制里面的<a href="https://github.com/settings/keys" target="_blank" rel="external">https://github.com/settings/keys</a>  点击 new SSH key的key里面-保存。</p>
<p>最后输入ssh -T git@github.com，结果如下代表你添加好SSH到你git上面了。</p>
<pre><code>Rc3@ppjun MINGW64 ~/Desktop
$  ssh -T git@github.com
Hi gdmec07120731! You&apos;ve successfully authenticated, but GitHub does not provide shell access.
</code></pre><h3 id="u914D_u7F6E_u522B_u540D"><a href="#u914D_u7F6E_u522B_u540D" class="headerlink" title="配置别名"></a>配置别名</h3><p><strong>–global是对用户所有项目生效</strong></p>
<p>用例如以下的公式</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="keyword">global</span> <span class="keyword">alias</span>.co checkout   <span class="comment">//用git co 代替 git checkout</span></span><br><span class="line">git config --<span class="keyword">global</span> <span class="keyword">alias</span>.st status     <span class="comment">//用git st 代替 git status</span></span><br><span class="line">git config --<span class="keyword">global</span> <span class="keyword">alias</span>.br branch</span><br><span class="line">git config --<span class="keyword">global</span> <span class="keyword">alias</span>.cm commit </span><br><span class="line"></span><br><span class="line">git config --<span class="keyword">global</span> <span class="keyword">alias</span>.lg <span class="string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</span></span><br><span class="line"><span class="comment">//配置log</span></span><br></pre></td></tr></table></figure>
<h3 id="u642D_u5EFA_u8FDC_u7A0BGIT_u670D_u52A1_u5668"><a href="#u642D_u5EFA_u8FDC_u7A0BGIT_u670D_u52A1_u5668" class="headerlink" title="搭建远程GIT服务器"></a>搭建远程GIT服务器</h3><ul>
<li><p>相当于github远程托管</p>
</li>
<li><p>强烈建议linux的机器，几条命令就可以搭建好了。</p>
</li>
<li><p>用apt-get下载git  sudo apt-get install git</p>
</li>
<li><p>新增git用户 sudo adduser git</p>
</li>
<li><p>拿到所有登录用户的id_rsa.pub 公钥，放在/home/git/.ssh/authorized_keys文件夹里面</p>
</li>
<li><p>初始化git仓库，选定一个文件夹作为仓库文件夹比如GitRepository/sample,在GitRepository下输入sudo git init –bare sample.git</p>
</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Gradle配置多渠道打包]]></title>
      <url>/2016/05/30/gradle%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85/</url>
      <content type="html"><![CDATA[<h1 id="Gradle_u591A_u6E20_u9053_u6253_u5305"><a href="#Gradle_u591A_u6E20_u9053_u6253_u5305" class="headerlink" title="Gradle多渠道打包"></a>Gradle多渠道打包</h1><blockquote>
<p>前言，多渠道打包的作用在于统计哪个app市场最多用户量下载量，推广效果最好。</p>
</blockquote>
<p>编译工具：AndroidStudio 2.2preview 1<br>gradle版本: gradle-2.10</p>
<p>打包原理：通过修改Androidmanifest.xml 自定义meta值来统计不同市场。</p>
<hr>
<p>下面是总结的打包流程：</p>
<h2 id="1-__u5728Androidmanifest-xml_u4E2DApplication_u6807_u7B7E_u4E0B"><a href="#1-__u5728Androidmanifest-xml_u4E2DApplication_u6807_u7B7E_u4E0B" class="headerlink" title="1. 在Androidmanifest.xml中Application标签下"></a>1. 在Androidmanifest.xml中Application标签下</h2><p>新增meta标签，name根据你的统计方式来定义，你可以用你app名（PPJUN_CHANNEL）<br>，如果你用友盟的统计name就要用UMENG_CHANNEL了。</p>
<p>自家自定义</p>
<pre><code>&lt;meta-data
android:name=&quot;PPJUN_CHANNEL&quot;
android:value=&quot;{UMENG_CHANNEL_ID}&quot;/&gt;
</code></pre><p>友盟统计</p>
<pre><code>&lt;meta-data
  android:name=&quot;UMENG_APPKEY&quot;
  android:value=&quot;123&quot;/&gt;

&lt;meta-data
  android:name=&quot;UMENG_CHANNEL&quot;
  android:value=&quot;{UMENG_CHANNEL_ID}&quot;/&gt;
</code></pre><h2 id="2-__u8BBE_u7F6Ebuild-gradle"><a href="#2-__u8BBE_u7F6Ebuild-gradle" class="headerlink" title="2. 设置build.gradle"></a>2. 设置build.gradle</h2><p>在app的build.gradle设置</p>
<pre><code>android{
   ...
   //配置签名信息
   signingConfigs {
    release {
        keyAlias &apos;ppjun&apos;
        keyPassword &apos;ppjun123&apos;
        storeFile file(&apos;C:/Users/Rabbit/Desktop/umeng_message201603291611_v2.8.0/LabelView/app/ppjun.jks&apos;)
        storePassword &apos;ppjun123&apos;

    }
}

   //配置签名apk优化
   buildTypes {
    release {
        zipAlignEnabled true
        minifyEnabled true
        shrinkResources true
        proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;
        signingConfig signingConfigs.release
    }
}

   //配置渠道号
   productFlavors {
    baidu {}
    google {}
    wandoujia {}
    xiaomi {}

}
   //关联渠道号和Androidmani.xml
productFlavors.all { flavor -&gt;
    flavor.manifestPlaceholders = [UMENG_CHANNEL_ID: flavor.name]
}

}
</code></pre><p>ps：signingConfigs这个方法一定要写在buildTypes方法前，不然不能通过clean。</p>
<h2 id="3-_u4FEE_u6539apk_u540D"><a href="#3-_u4FEE_u6539apk_u540D" class="headerlink" title="3.修改apk名"></a>3.修改apk名</h2><p>如果要打包出app_v1.0_1_20160101_xiaomi.apk这样子的包名<br>在build.gradle</p>
<pre><code>android{
  ...
 applicationVariants.all { variant -&gt;
    variant.outputs.each { output -&gt;
        // 重命名产出的apk文件
        def outputFile = output.outputFile
        if (outputFile != null &amp;&amp; outputFile.name.endsWith(&apos;.apk&apos;)) {
            File outputDirectory = new File(outputFile.parent);
            def fileName
            if (variant.buildType.name == &quot;release&quot;) {
                fileName = &quot;app_v${defaultConfig.versionName}_${defaultConfig.versionCode}_${packageTime()}_${variant.productFlavors[0].name}.apk&quot;
            } else {
                fileName = &quot;app_v${defaultConfig.versionName}_${defaultConfig.versionCode}_${packageTime()}_debug.apk&quot;
            }
            output.outputFile = new File(outputDirectory, fileName)
        }

        // 删除unaligned apk
        if (output.zipAlign != null) {
            output.zipAlign.doLast {
                output.zipAlign.inputFile.delete()
            }
        }
    }
  }
}
//在android外层
def packageTime() {
return new Date().format(&quot;yyyyMMdd&quot;, TimeZone.getTimeZone(&quot;UTC&quot;))

}
</code></pre><h2 id="4-_u5728Terminal_u8FD0_u884C_u547D_u4EE4"><a href="#4-_u5728Terminal_u8FD0_u884C_u547D_u4EE4" class="headerlink" title="4.在Terminal运行命令"></a>4.在Terminal运行命令</h2><p>先运行，clean项目</p>
<pre><code>gradlew clean 
</code></pre><p>成功后再运行，开始正式打包</p>
<pre><code>gradlew assembleRelease
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[U8SDK笔记]]></title>
      <url>/2016/03/28/U8SDK%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="u4EC0_u4E48_u662FU8SDK"><a href="#u4EC0_u4E48_u662FU8SDK" class="headerlink" title="什么是U8SDK"></a>什么是U8SDK</h2><p>集成各个渠道比如（uc,小米，360）的sdk ，一次接入，打包出不同渠道的APK，大大减少游戏接入渠道的繁琐操作。</p>
<p>统一的接入框架，<br>各个SDK的接入<br> 一键打包工具(python)，<br>统一的登录验证中心支付中心，<br>多个平台（unity,coco2dx）的支持.</p>
<h2 id="u5DE5_u4F5C_u539F_u7406"><a href="#u5DE5_u4F5C_u539F_u7406" class="headerlink" title="工作原理"></a>工作原理</h2><p>初始化时根据不同渠道U8Server自定义U8id,U8key分配给U8SDK<br>U8SDK抽象层实现各个渠道的登录，获取登录信息后 u8server登录验证返回验证结果，返回给游戏。<br>U8SDK调用各个渠道的支付后，渠道支付首先通知U8server,U8server再通知游戏服务器。</p>
<p>打包工具用到的jar等<br>aapt.exe,android.jar,apktool.jar,baksmail.jar,dx.bat,zipalign.exe</p>
<h2 id="u5DE5_u4F5C_u6D41_u7A0B"><a href="#u5DE5_u4F5C_u6D41_u7A0B" class="headerlink" title="工作流程"></a>工作流程</h2><p>游戏母包接入U8sdk,反编译母包，复制各个渠道sdk的res，assets，资源到母包，各个渠道.dx转smali后复制到母包，合并AndroidManifest.xml权限，Service,Activity等。修改包名（.activity，.service），合并资源后重新生成R文件，回编译母包，签名母包。</p>
]]></content>
      
        
        <tags>
            
            <tag> U8SDK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Dagger2笔记]]></title>
      <url>/2016/03/23/Dagger2-%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文摘要自<a href="http://jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0519/2892.html" target="_blank" rel="external">http://jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0519/2892.html</a><br>目前安卓开发最新技术用到Retrofit网络请求框架，Rxjava异步处理，OkHttp网络请求，加上Gson解析，MVP项目架构，Lambda语法，Dagger2依赖注入，ButterKnife控件的依赖等</p>
</blockquote>
<h3 id="u4EC0_u4E48_u662FDagger2"><a href="#u4EC0_u4E48_u662FDagger2" class="headerlink" title="什么是Dagger2"></a>什么是Dagger2</h3><p><a href="https://github.com/google/dagger/" target="_blank" rel="external">Dagger2</a>是Dagger1的分支，由谷歌公司接手开发，目前的版本是2.0。Dagger2是受到AutoValue项目的启发。 刚开始，Dagger2解决问题的基本思想是：利用生成和写的代码混合达到看似所有的产生和提供依赖的代码都是手写的样子。</p>
<h3 id="u4F9D_u8D56_u6CE8_u5165_u597D_u5904"><a href="#u4F9D_u8D56_u6CE8_u5165_u597D_u5904" class="headerlink" title="依赖注入好处"></a>依赖注入好处</h3><p>依赖注入好处就是大大方便解耦，方便修改代码，为什么要用Dagger2利用编译期的注解处理来生成依赖注入的代码，尽可能的减少了反射的使用，提高app性能。</p>
<h3 id="Dagger2__u4F7F_u7528"><a href="#Dagger2__u4F7F_u7528" class="headerlink" title="Dagger2 使用"></a>Dagger2 使用</h3><p>在AndroidStudio 使用<br>在build:gradle(Moudle:app)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    apply plugin: <span class="string">'com.neenbedankt.android-apt'</span> </span><br><span class="line"></span><br><span class="line">    dependencies &#123;</span><br><span class="line">           compile <span class="string">'com.google.dagger:dagger:2.1'</span> <span class="comment">// dagger2</span></span><br><span class="line">           apt <span class="string">'com.google.dagger:dagger-compiler:2.1'</span> <span class="comment">// dagger2</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在build:gradle(Project:项目名)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">     dependencies &#123;</span><br><span class="line">            classpath <span class="string">'com.android.tools.build:gradle:2.1.0-alpha3'</span></span><br><span class="line">            classpath <span class="string">'com.neenbedankt.gradle.plugins:android-apt:1.8'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以上配置完毕</p>
<h3 id="Dagger2__u5173_u952E_u8BCD"><a href="#Dagger2__u5173_u952E_u8BCD" class="headerlink" title="Dagger2 关键词"></a>Dagger2 关键词</h3><p> <strong><em>@Inject</em></strong>  通常需要依赖的地方使用这个注解，换句话来说它告诉dagger这个类或者字段需要依赖，这样子 dagger就会造这个类的实例来满足依赖。例如在MainActivity类里 实例化 GitHubService ,下面就可以直接使用mGitHubService。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Inject</span></span><br><span class="line">GitHubService mGitHubService;</span><br></pre></td></tr></table></figure></p>
<hr>
<p> <strong><em>@Module</em></strong>  Modules类里面的方法专门提供依赖，所以我们定义一个类用@Module注解，这样Dagger构建类的实例的时候，就知道从哪里找到需要的依赖，module的一个重要特征是他们设计为分区并结合使用，比如在Modules包下 有MainModule ,ApiModule或者DBModule这些类都注解了@Module<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiModule</span> </span>&#123;</span><br></pre></td></tr></table></figure></p>
<hr>
<p><strong><em>@Provides</em></strong>  我们为在Module类中 定义的方法使用这个注解 ，来告诉dagger我们构造对象并且提供这些方法依赖<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Provides</span></span><br><span class="line">    <span class="annotation">@Singleton</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> GitHubService <span class="title">provideGitHubService</span><span class="params">()</span> </span>&#123;</span><br></pre></td></tr></table></figure></p>
<hr>
<p><strong><em>@Component</em></strong>  @Component从根本上来说是一个注解器，也就是说@Inject和@Module的桥梁，它的主要作用就是连接这两个部分，@Component可以提供所有定义了类型的实例，比如：我们必须用@Component注解一个接口，然后列出所有的@Module组成改组件，如果缺失任何一块都会在编译的时候报错，所有的组件都可以通过他的@Module知道依赖范围。例子中定义DemoComponent接口 用@Component注解所有的@Module类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Singleton</span></span><br><span class="line"><span class="annotation">@Component</span>(modules = &#123;MainModule.class, ApiModule.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoComponent</span> <span class="keyword">extends</span> <span class="title">DemoGraph</span> </span>&#123;</span><br></pre></td></tr></table></figure></p>
<hr>
<p><strong><em>@Scope</em></strong> Dagger可以通过自定义注解来限定注解作用域，这是一个非常强大的特点，，因为就如前面说的一样，没必要让每个对象都去了解如何管理他们的实例，在Scope例子中，我们自定义@PerActivity注解一个类，所以这个对象存活时间就和activity一样，简单来说就是我们定义所有范围的粒度（@Perfragment,@preUser等）</p>
<hr>
<p><strong><em>@Qualifier</em></strong> 当类的类型不足以鉴别一个依赖的时候，我们就可以用这个注解来标示，例如：我们会用不同类型的Context 所以我们就可以定义 Qualifier注解@ForApplication 和@ForActivity<br>这样当注入一个Context的时候，我们就可以告诉dagger我们想要哪种类型的Context</p>
]]></content>
      
        
        <tags>
            
            <tag> Dagger2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android studio配置lambda]]></title>
      <url>/2016/02/26/Android-Studio%E4%BD%BF%E7%94%A8Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h4 id="1_u3001_u4EC0_u4E48_u662FLambda"><a href="#1_u3001_u4EC0_u4E48_u662FLambda" class="headerlink" title="1、什么是Lambda"></a>1、什么是Lambda</h4><p>Java 8的一个大亮点是引入Lambda表达式，使用它设计的代码会更加简洁。当开发者在编写Lambda表达式时，也会随之被编译成一个函数式接口。下面这个例子就是使用Lambda语法来代替匿名的内部类，代码不仅简洁，而且还可读。_来源百度百科</p>
<p>使用Lambda前<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">     <span class="annotation">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">          <span class="comment">//dosomething</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></p>
<p>使用lambda后<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">button.setOnClickListener(</span><br><span class="line">              v -&gt; &#123;</span><br><span class="line">         <span class="comment">//dosomething</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h4 id="2_u3001AndroidStudio_u600E_u4E48_u914D_u7F6ELambda"><a href="#2_u3001AndroidStudio_u600E_u4E48_u914D_u7F6ELambda" class="headerlink" title="2、AndroidStudio怎么配置Lambda"></a>2、AndroidStudio怎么配置Lambda</h4><p>   在build.gradle(Moudle:app) </p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span><span class="string">'me.tatarka.retrolambda'</span></span><br><span class="line"></span><br><span class="line">android&#123;</span><br><span class="line">   compileOptions&#123;</span><br><span class="line">      sourceCompatibility org.gradle.api.JavaVersion.VERSION_1_8</span><br><span class="line">      targetCompatibility org.gradle.api.JavaVersion.VERSION_1_8</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在build.gradle(Project:项目名)  </p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    classpath <span class="string">'com.android.tools.build:gradle:2.0.0-beta6'</span></span><br><span class="line">    classpath <span class="string">'me.tatarka:gradle-retrolambda:3.2.4'</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上配置完毕。</p>
]]></content>
      
        
        <tags>
            
            <tag> lambda </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何科学上网]]></title>
      <url>/2016/02/24/%E5%A6%82%E4%BD%95%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
      <content type="html"><![CDATA[<h3 id="u5728window_u4E0A_u7684_u79D1_u5B66_u4E0A_u7F51"><a href="#u5728window_u4E0A_u7684_u79D1_u5B66_u4E0A_u7F51" class="headerlink" title="在window上的科学上网"></a>在window上的科学上网</h3><h4 id="u65B9_u6CD5_u4E00__uFF1A_u5F71_u68ADShadowSocks"><a href="#u65B9_u6CD5_u4E00__uFF1A_u5F71_u68ADShadowSocks" class="headerlink" title="方法一 ：影梭ShadowSocks"></a>方法一 ：影梭ShadowSocks</h4><p>1、下载shadowsocks软件</p>
<p>百度网盘<a href="http://pan.baidu.com/s/1bsrCZW" target="_blank" rel="external">下载链接</a></p>
<p>2、打开shadowsocks 输入shadowsocks账号</p>
<p>ps ：免费账号获取方式 打开<a href="http://www.ishadowsocks.com/" title="ishadowsocks" target="_blank" rel="external">链接</a> 进入ishadowsocks （每6小时更换一次密码 中午12点左右换一次的）</p>
<h4 id="u65B9_u6CD5_u4E8C__uFF1A_u84DD_u706FLantern"><a href="#u65B9_u6CD5_u4E8C__uFF1A_u84DD_u706FLantern" class="headerlink" title="方法二 ：蓝灯Lantern"></a>方法二 ：蓝灯Lantern</h4><p>Lantern是一个免费的应用程序。它能帮助你随时随地快速、可靠、安全地访问互联网。</p>
<p>蓝灯官网（需翻墙）<a href="https://getlantern.org/" target="_blank" rel="external"> https://getlantern.org/</a><br>蓝灯github <a href="https://github.com/getlantern/lantern" target="_blank" rel="external">https://github.com/getlantern/lantern</a></p>
<p>下载window版本安装后无需配置就可以直接科学上网 <a href="https://raw.githubusercontent.com/getlantern/lantern-binaries/master/lantern-installer-beta.exe" target="_blank" rel="external">https://raw.githubusercontent.com/getlantern/lantern-binaries/master/lantern-installer-beta.exe</a></p>
]]></content>
      
        
        <tags>
            
            <tag> shadowsock </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cocos2d-x接入第三方SDK]]></title>
      <url>/2016/01/11/Cocos2d-x%E6%8E%A5%E5%85%A5%E7%AC%AC%E4%B8%89%E6%96%B9SDK/</url>
      <content type="html"><![CDATA[<h3 id="Cocos2d-x_u6E38_u620F_u63A5_u5165_u5B89_u5353_u7B2C_u4E09_u65B9SDK"><a href="#Cocos2d-x_u6E38_u620F_u63A5_u5165_u5B89_u5353_u7B2C_u4E09_u65B9SDK" class="headerlink" title="Cocos2d-x游戏接入安卓第三方SDK"></a>Cocos2d-x游戏接入安卓第三方SDK</h3><h4 id="1-_u6982_u8FF0"><a href="#1-_u6982_u8FF0" class="headerlink" title="1.概述"></a>1.概述</h4><p>U3D游戏和Cocos2dx手游都会接入不同渠道的支付方式，本文运用jni知识以360渠道接入作为演示。</p>
<h4 id="2-_u73AF_u5883"><a href="#2-_u73AF_u5883" class="headerlink" title="2.环境"></a>2.环境</h4><p>OS: win10<br>IDE: Eclipse<br>Adnroid NDK:r10e<br>cocos2d-x-3.9</p>
<h4 id="3-_u521B_u5EFACocos2d-x_u5DE5_u7A0B"><a href="#3-_u521B_u5EFACocos2d-x_u5DE5_u7A0B" class="headerlink" title="3.创建Cocos2d-x工程"></a>3.创建Cocos2d-x工程</h4><p>运行命令</p>
<pre><code>cocos new -p com.ohj.cocos2dx360 -l cpp -d Cocos2dx360SDK
</code></pre><p>然后进入Cocos2dx360SDK-MyCppGame-proj.android执行build_native.py 生成.so文件</p>
<p>编译成功后你会在libs-armeabi看到libcocos2dcpp.so </p>
<p>最后导入Eclipse，是导入2个工程 ，分别是MyCppGame和库libcocos2dx。（导入EC时注意不要复制工程项目到工作区间）</p>
<h4 id="4-_u5F00_u59CB_u914D_u7F6E360SDK"><a href="#4-_u5F00_u59CB_u914D_u7F6E360SDK" class="headerlink" title="4.开始配置360SDK"></a>4.开始配置360SDK</h4><p>导入assets、lib文件，配置好AndroidManifest.xml </p>
<p>在AppActivity.java 的OnCreate初始化</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   <span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	<span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">	</span><br><span class="line">	mContext = <span class="keyword">this</span>;</span><br><span class="line">	Matrix.init(<span class="keyword">this</span>);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着创建静态登录方法，直接调用360的登录方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">login360</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	Intent intent = getLoginIntent();</span><br><span class="line">	IDispatcherCallback callback = mLoginCallback;</span><br><span class="line">	Matrix.execute(mContext, intent, callback);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="5-jni_u8C03_u7528_u767B_u5F55_u65B9_u6CD5"><a href="#5-jni_u8C03_u7528_u767B_u5F55_u65B9_u6CD5" class="headerlink" title="5.jni调用登录方法"></a>5.jni调用登录方法</h4><p>在classes下创建SDK360.h 和SDK.cpp</p>
<p>SDK360.h 代码如下<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="preprocessor">#<span class="keyword">ifndef</span> __SDK360_H__</span></span><br><span class="line">  <span class="preprocessor">#<span class="keyword">define</span> __SDK360_H__</span></span><br><span class="line"></span><br><span class="line">  <span class="preprocessor">#<span class="keyword">include</span> <span class="string">"cocos2d.h"</span></span></span><br><span class="line"></span><br><span class="line">  <span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>  </span></span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> cocos2d;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">  <span class="keyword">class</span> SDK360</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">   SDK360();</span><br><span class="line">   <span class="keyword">virtual</span> ~SDK360();</span><br><span class="line"><span class="function"><span class="keyword">static</span> SDK360*  <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="preprocessor">#<span class="keyword">endif</span> <span class="comment">// __SDK360_H__</span></span></span><br></pre></td></tr></table></figure></p>
<p>SDK360.cpp 代码如下<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">    <span class="preprocessor">#<span class="keyword">include</span> <span class="string">"SDK360.h"</span></span></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>  </span></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">include</span> <span class="string">"cocos2d.h"</span></span></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">include</span> <span class="string">"platform/android/jni/JniHelper.h"</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">static</span> SDK360* mInstance=<span class="literal">NULL</span>;</span><br><span class="line">    SDK360::SDK360()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    SDK360::~SDK360()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    SDK360* SDK360::getInstance()</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span>==mInstance)</span><br><span class="line">&#123;</span><br><span class="line">mInstance=<span class="keyword">new</span> SDK360();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">void</span> SDK360::login()</span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">   <span class="preprocessor">#<span class="keyword">if</span>(CC_TARGET_PLATFORM==CC_PLATFORM_ANDROID)</span></span><br><span class="line">   JniMethodInfo minfo;</span><br><span class="line">   <span class="keyword">bool</span> isHave=JniHelper::getStaticMethodInfo(minfo,<span class="string">"org/cocos2dx/cpp/AppActivity"</span>,<span class="string">"login360"</span>,<span class="string">"()V"</span>);</span><br><span class="line"><span class="keyword">if</span>(!isHave)&#123;</span><br><span class="line">	</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> minfo.env-&gt;CallStaticVoidMethod(minfo.classID,minfo.methodID);</span><br><span class="line"> minfo.env-&gt;DeleteLocalRef(minfo.classID);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">   <span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>我们会在原工程右下角调用登录方法，需要修改HelloWorldScence.cpp</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"SDK360.h"</span></span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"> <span class="keyword">void</span> HelloWorld::menuCloseCallback(Ref* pSender)</span><br><span class="line"> &#123;</span><br><span class="line">  SDK360::getInstance()-&gt;login();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p> 最后在工程目录下jni-Android.mk 调用刚写好的SDK360.cpp</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_SRC_FILES := hellocpp/main.cpp \</span><br><span class="line">               ../../Classes/AppDelegate.cpp \</span><br><span class="line">               ../../Classes/SDK360.cpp \</span><br><span class="line">               ../../Classes/HelloWorldScene.cpp</span><br></pre></td></tr></table></figure>
<p>修改过c++文件都要重新编译一下.so文件<br>执行build_native.py 编译成功后你就可以run运行起来了。</p>
<p>ps: 调用360支付也同样道理.</p>
<p><a href="https://github.com/gdmec07120731/Cocos2dx360SDK" target="_blank" rel="external">Demo下载。</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Cocos2dx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VirtualBox 遇到VERR _INTNET _FLT _IF _NOT _FOUND]]></title>
      <url>/2015/12/10/VirtualBox%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C/</url>
      <content type="html"><![CDATA[<h3 id="u89E3_u51B3win10_u5347_u7EA7TH2_u540E_VirtualBox_u51FA_u73B0VERR__INTNET__FLT__IF__NOT__FOUND_u95EE_u9898"><a href="#u89E3_u51B3win10_u5347_u7EA7TH2_u540E_VirtualBox_u51FA_u73B0VERR__INTNET__FLT__IF__NOT__FOUND_u95EE_u9898" class="headerlink" title="解决win10升级TH2后 VirtualBox出现VERR _INTNET _FLT _IF _NOT _FOUND问题"></a>解决win10升级TH2后 VirtualBox出现VERR _INTNET _FLT _IF _NOT _FOUND问题</h3><p>出自</p>
<p><a href="http://tieba.baidu.com/p/4177034202" title="genymotion吧" target="_blank" rel="external"> http://tieba.baidu.com/p/4177034202 </a></p>
<p><a href="http://superuser.com/questions/1002160/failed-to-start-virtual-device-in-oracle-virtual-box" target="_blank" rel="external">http://superuser.com/questions/1002160/failed-to-start-virtual-device-in-oracle-virtual-box</a></p>
<h4 id="u95EE_u9898_u63CF_u8FF0"><a href="#u95EE_u9898_u63CF_u8FF0" class="headerlink" title="问题描述"></a>问题描述</h4><p>win10升级TH2后virtualbox无法正常运行，virtualbox关键错误VERR _INTNET _FLT _IF _NOT _FOUND</p>
<h4 id="u89E3_u51B3_u529E_u6CD5"><a href="#u89E3_u51B3_u529E_u6CD5" class="headerlink" title="解决办法"></a>解决办法</h4><p>打开 网络和共享中心-更改适配器设置-选择VirtualBox Host-Only Network-右击属性</p>
<p><strong>把VirtualBox NDIS6 Bridged Networking Driver 选择上就OK可以运行genymotion了</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> Genymotion </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
